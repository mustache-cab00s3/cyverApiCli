package pentester

import (
	"fmt"
	"strings"

	"github.com/spf13/cobra"
	"github.com/yourusername/cyverApiCli/cmd/shared"
	"github.com/yourusername/cyverApiCli/internal/api/versions/v2_2"
	"github.com/yourusername/cyverApiCli/internal/errors"
)

// Findings command group
var findingsCmd = &cobra.Command{
	Use:   "findings",
	Short: "Manage findings operations",
	Long:  `Manage findings information and operations for pentesters.`,
}

// List findings command
var listFindingsCmd = &cobra.Command{
	Use:   "list",
	Short: "List findings (pentester view)",
	Long:  `Retrieve a paginated list of findings with optional filtering using pentester operations.`,
	Run: func(cmd *cobra.Command, args []string) {
		clientVersion := shared.GetVersionedApiClient()
		if clientVersion == nil {
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeConfigInvalid, "failed to initialize API client", nil))
			return
		}

		// Type switch to handle different client versions
		switch client := clientVersion.(type) {
		case *v2_2.Client:
			if client.PentesterOps == nil {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, "PentesterOps is nil for v2.2 client", nil))
				return
			}

			// Get flag values with defaults
			projectID, _ := cmd.Flags().GetString("project-id")
			findingType, _ := cmd.Flags().GetString("type")
			status, _ := cmd.Flags().GetString("status")
			severityList, _ := cmd.Flags().GetString("severity-list")
			vulnerabilityTypeList, _ := cmd.Flags().GetString("vulnerability-type-list")
			idList, _ := cmd.Flags().GetString("id-list")
			assetIdList, _ := cmd.Flags().GetString("asset-id-list")
			maxResults, _ := cmd.Flags().GetInt("max-results")
			skipCount, _ := cmd.Flags().GetInt("skip-count")

			pagedResult, err := client.PentesterOps.ApiV22PentesterFindingsGet(projectID, findingType, status, severityList, vulnerabilityTypeList, idList, assetIdList, maxResults, skipCount)
			if err != nil {
				shared.HandleError(cmd, err)
				return
			}

			// Get the output format option and validate it
			outputFormat, _ := cmd.Flags().GetString("output")

			// Validate output format
			validFormats := []string{"json", "short", "table", "custom"}
			isValidFormat := false
			for _, format := range validFormats {
				if outputFormat == format {
					isValidFormat = true
					break
				}
			}

			if !isValidFormat {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeValidationFailed,
					fmt.Sprintf("Invalid output format '%s'. Valid options are: %s", outputFormat, strings.Join(validFormats, ", ")), nil))
				return
			}

			// Use the output format-specific function
			switch outputFormat {
			case "json":
				if err := shared.PrintJSONResponse(pagedResult); err != nil {
					shared.HandleError(cmd, err)
				}
			case "short":
				if err := shared.PrintSimpleFindingsList(pagedResult); err != nil {
					shared.LogError("Error printing short response", "error", err)
				}
			case "table":
				if err := shared.PrintSimpleFindingsTable(pagedResult); err != nil {
					shared.HandleError(cmd, err)
				}
			case "custom":
				maxColumns, _ := cmd.Flags().GetInt("max-columns")
				if maxColumns <= 0 {
					maxColumns = 4 // Default to 4 columns
				}
				if err := shared.PrintCustomTable(pagedResult, maxColumns); err != nil {
					shared.HandleError(cmd, err)
				}
			}

		default:
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, fmt.Sprintf("unsupported client type: %T", clientVersion), nil))
			return
		}
	},
}

// Get finding by ID command
var getFindingCmd = &cobra.Command{
	Use:   "get [finding-id]",
	Short: "Get finding by ID (pentester view)",
	Long:  `Retrieve detailed information about a specific finding using pentester operations.`,
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		findingID := args[0]

		clientVersion := shared.GetVersionedApiClient()
		if clientVersion == nil {
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeConfigInvalid, "failed to initialize API client", nil))
			return
		}

		// Type switch to handle different client versions
		switch client := clientVersion.(type) {
		case *v2_2.Client:
			if client.PentesterOps == nil {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, "PentesterOps is nil for v2.2 client", nil))
				return
			}

			// Get flag value with default
			includeEvidence, _ := cmd.Flags().GetBool("include-evidence")

			response, err := client.PentesterOps.ApiV22PentesterFindingsByIdGet(findingID, includeEvidence)
			if err != nil {
				shared.LogError("Error: failed to get finding", "error", err)
				return
			}

			// Get the output format option
			outputFormat, _ := cmd.Flags().GetString("output")

			// Validate output format
			validFormats := []string{"json", "table", "custom"}
			isValidFormat := false
			for _, format := range validFormats {
				if outputFormat == format {
					isValidFormat = true
					break
				}
			}

			if !isValidFormat {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeValidationFailed,
					fmt.Sprintf("Invalid output format '%s'. Valid options are: %s", outputFormat, strings.Join(validFormats, ", ")), nil))
				return
			}

			if err != nil {
				shared.LogError("Error: failed to get finding", "error", err)
				return
			}

			// Use the output format-specific function
			switch outputFormat {
			case "json":
				if err := shared.PrintJSONResponse(response); err != nil {
					shared.HandleError(cmd, err)
				}
			case "table":
				if err := shared.PrintFindingTable(response); err != nil {
					shared.HandleError(cmd, err)
				}
			case "custom":
				maxColumns, _ := cmd.Flags().GetInt("max-columns")
				if maxColumns <= 0 {
					maxColumns = 4 // Default to 4 columns
				}
				if err := shared.PrintCustomTable(response, maxColumns); err != nil {
					shared.HandleError(cmd, err)
				}
			}

		default:
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, fmt.Sprintf("unsupported client type: %T", clientVersion), nil))
			return
		}
	},
}

// Create finding command
var createFindingCmd = &cobra.Command{
	Use:   "create",
	Short: "Create a new finding (pentester view)",
	Long:  `Create a new finding with the specified details using pentester operations.`,
	Run: func(cmd *cobra.Command, args []string) {
		projectID, _ := cmd.Flags().GetString("project-id")
		triggerEvents, _ := cmd.Flags().GetBool("trigger-events")

		if projectID == "" {
			shared.LogError("Error: project-id is required")
			return
		}

		// Get finding data from flags
		title, _ := cmd.Flags().GetString("title")
		description, _ := cmd.Flags().GetString("description")
		severity, _ := cmd.Flags().GetString("severity")
		status, _ := cmd.Flags().GetString("status")

		if title == "" {
			shared.LogError("Error: title is required")
			return
		}

		// Create finding request body
		findingBody := map[string]interface{}{
			"projectId":   projectID,
			"title":       title,
			"description": description,
			"severity":    severity,
			"status":      status,
		}

		clientVersion := shared.GetVersionedApiClient()
		if clientVersion == nil {
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeConfigInvalid, "failed to initialize API client", nil))
			return
		}

		// Type switch to handle different client versions
		switch client := clientVersion.(type) {
		case *v2_2.Client:
			if client.PentesterOps == nil {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, "PentesterOps is nil for v2.2 client", nil))
				return
			}

			_, err := client.PentesterOps.ApiV22PentesterFindingsPost(projectID, triggerEvents, findingBody)
			if err != nil {
				shared.LogError("Error: failed to create finding", "error", err)
				return
			}

			fmt.Printf("Successfully created finding\n")

		default:
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, fmt.Sprintf("unsupported client type: %T", clientVersion), nil))
			return
		}
	},
}

// Update finding command
var updateFindingCmd = &cobra.Command{
	Use:   "update [finding-id]",
	Short: "Update a finding (pentester view)",
	Long:  `Update an existing finding using pentester operations.`,
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		findingID := args[0]
		triggerEvents, _ := cmd.Flags().GetBool("trigger-events")

		// Get update data from flags
		title, _ := cmd.Flags().GetString("title")
		description, _ := cmd.Flags().GetString("description")
		severity, _ := cmd.Flags().GetString("severity")
		status, _ := cmd.Flags().GetString("status")

		// Create update request body
		updateBody := map[string]interface{}{}
		if title != "" {
			updateBody["title"] = title
		}
		if description != "" {
			updateBody["description"] = description
		}
		if severity != "" {
			updateBody["severity"] = severity
		}
		if status != "" {
			updateBody["status"] = status
		}

		clientVersion := shared.GetVersionedApiClient()
		if clientVersion == nil {
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeConfigInvalid, "failed to initialize API client", nil))
			return
		}

		// Type switch to handle different client versions
		switch client := clientVersion.(type) {
		case *v2_2.Client:
			if client.PentesterOps == nil {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, "PentesterOps is nil for v2.2 client", nil))
				return
			}

			_, err := client.PentesterOps.ApiV22PentesterFindingsByIdPut(findingID, triggerEvents, updateBody)
			if err != nil {
				shared.LogError("Error: failed to update finding", "error", err)
				return
			}

			fmt.Printf("Successfully updated finding %s\n", findingID)

		default:
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, fmt.Sprintf("unsupported client type: %T", clientVersion), nil))
			return
		}
	},
}

// Delete finding command
var deleteFindingCmd = &cobra.Command{
	Use:   "delete [finding-id]",
	Short: "Delete a finding (pentester view)",
	Long:  `Delete a finding by its ID using pentester operations.`,
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		findingID := args[0]

		clientVersion := shared.GetVersionedApiClient()
		if clientVersion == nil {
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeConfigInvalid, "failed to initialize API client", nil))
			return
		}

		// Type switch to handle different client versions
		switch client := clientVersion.(type) {
		case *v2_2.Client:
			if client.PentesterOps == nil {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, "PentesterOps is nil for v2.2 client", nil))
				return
			}

			_, err := client.PentesterOps.ApiV22PentesterFindingsByIdDelete(findingID)
			if err != nil {
				shared.LogError("Error: failed to delete finding", "error", err)
				return
			}

			fmt.Printf("Successfully deleted finding %s\n", findingID)

		default:
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, fmt.Sprintf("unsupported client type: %T", clientVersion), nil))
			return
		}
	},
}

// Import findings command
var importFindingsCmd = &cobra.Command{
	Use:   "import [file-path]",
	Short: "Import findings from file (pentester view)",
	Long:  `Import findings from a file using pentester operations.`,
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		filePath := args[0]

		// Create import request body
		importBody := map[string]interface{}{
			"filePath": filePath,
		}

		clientVersion := shared.GetVersionedApiClient()
		if clientVersion == nil {
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeConfigInvalid, "failed to initialize API client", nil))
			return
		}

		// Type switch to handle different client versions
		switch client := clientVersion.(type) {
		case *v2_2.Client:
			if client.PentesterOps == nil {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, "PentesterOps is nil for v2.2 client", nil))
				return
			}

			response, err := client.PentesterOps.ApiV22PentesterFindingsImportPost(importBody)
			if err != nil {
				shared.LogError("Error: failed to import findings", "error", err)
				return
			}

			fmt.Printf("Successfully imported findings from %s\n", filePath)
			if response != nil {
				fmt.Printf("Import result: %v\n", response)
			}

		default:
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, fmt.Sprintf("unsupported client type: %T", clientVersion), nil))
			return
		}
	},
}

// Initialize function to register all findings commands
func init() {
	// Add flags to list findings command
	listFindingsCmd.Flags().String("project-id", "", "Filter by project ID")
	listFindingsCmd.Flags().String("type", "", "Filter by finding type")
	listFindingsCmd.Flags().String("status", "", "Filter by status")
	listFindingsCmd.Flags().String("severity-list", "", "Filter by severity list")
	listFindingsCmd.Flags().String("vulnerability-type-list", "", "Filter by vulnerability type list")
	listFindingsCmd.Flags().String("id-list", "", "Filter by ID list")
	listFindingsCmd.Flags().String("asset-id-list", "", "Filter by asset ID list")
	listFindingsCmd.Flags().Int("max-results", 10, "Maximum number of results")
	listFindingsCmd.Flags().Int("skip-count", 0, "Number of results to skip")
	listFindingsCmd.Flags().StringP("output", "o", "table", "Output format (json, short, table, custom)")
	listFindingsCmd.Flags().Int("max-columns", 4, "Maximum number of columns for custom table output")

	// Add flags to get finding command
	getFindingCmd.Flags().StringP("output", "o", "table", "Output format (json, table, custom)")
	getFindingCmd.Flags().Int("max-columns", 4, "Maximum number of columns for custom table output")
	getFindingCmd.Flags().Bool("include-evidence", false, "Include evidence in the response")

	// Add flags to create finding command
	createFindingCmd.Flags().String("project-id", "", "Project ID (required)")
	createFindingCmd.Flags().String("title", "", "Finding title (required)")
	createFindingCmd.Flags().String("description", "", "Finding description")
	createFindingCmd.Flags().String("severity", "", "Finding severity")
	createFindingCmd.Flags().String("status", "", "Finding status")
	createFindingCmd.Flags().Bool("trigger-events", false, "Trigger events")

	// Add flags to update finding command
	updateFindingCmd.Flags().String("title", "", "Finding title")
	updateFindingCmd.Flags().String("description", "", "Finding description")
	updateFindingCmd.Flags().String("severity", "", "Finding severity")
	updateFindingCmd.Flags().String("status", "", "Finding status")
	updateFindingCmd.Flags().Bool("trigger-events", false, "Trigger events")

	// Add all commands to the findings command group
	findingsCmd.AddCommand(listFindingsCmd)
	findingsCmd.AddCommand(getFindingCmd)
	findingsCmd.AddCommand(createFindingCmd)
	findingsCmd.AddCommand(updateFindingCmd)
	findingsCmd.AddCommand(deleteFindingCmd)
	findingsCmd.AddCommand(importFindingsCmd)

	// Commands will be added to pentester command group via InitPentesterCommands
}
