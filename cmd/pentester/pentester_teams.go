package pentester

import (
	"encoding/json"
	"fmt"
	"strings"

	"github.com/spf13/cobra"
	"github.com/yourusername/cyverApiCli/cmd/shared"
	"github.com/yourusername/cyverApiCli/internal/api/versions/v2_2"
	"github.com/yourusername/cyverApiCli/internal/errors"
)

// Teams command group
var teamsCmd = &cobra.Command{
	Use:   "teams",
	Short: "Manage team operations",
	Long:  `Manage team information and operations for pentesters.`,
}

// List teams command
var listTeamsCmd = &cobra.Command{
	Use:   "list",
	Short: "List teams (pentester view)",
	Long:  `Retrieve a paginated list of teams with optional filtering using pentester operations.`,
	Run: func(cmd *cobra.Command, args []string) {
		clientVersion := shared.GetVersionedApiClient()
		if clientVersion == nil {
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeConfigInvalid, "failed to initialize API client", nil))
			return
		}

		// Type switch to handle different client versions
		switch client := clientVersion.(type) {
		case *v2_2.Client:
			if client.PentesterOps == nil {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, "PentesterOps is nil for v2.2 client", nil))
				return
			}

			// Get flag values with defaults
			projectID, _ := cmd.Flags().GetString("project-id")
			excludeProjectID, _ := cmd.Flags().GetString("exclude-project-id")
			clientID, _ := cmd.Flags().GetString("client-id")
			teamType, _ := cmd.Flags().GetString("team-type")
			maxResults, _ := cmd.Flags().GetInt("max-results")
			skipCount, _ := cmd.Flags().GetInt("skip-count")
			filter, _ := cmd.Flags().GetString("filter")

			pagedResult, err := client.PentesterOps.ApiV22PentesterTeamsGet(projectID, excludeProjectID, clientID, teamType, maxResults, skipCount, filter)
			if err != nil {
				shared.HandleError(cmd, err)
				return
			}

			// Get the output format option and validate it
			outputFormat, _ := cmd.Flags().GetString("output")

			// Validate output format
			validFormats := []string{"json", "short", "table", "custom"}
			isValidFormat := false
			for _, format := range validFormats {
				if outputFormat == format {
					isValidFormat = true
					break
				}
			}

			if !isValidFormat {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeValidationFailed,
					fmt.Sprintf("Invalid output format '%s'. Valid options are: %s", outputFormat, strings.Join(validFormats, ", ")), nil))
				return
			}

			// Use the output format-specific function
			switch outputFormat {
			case "json":
				if err := shared.PrintJSONResponse(pagedResult); err != nil {
					shared.HandleError(cmd, err)
				}
			case "short":
				if err := shared.PrintSimpleProjectsList(pagedResult); err != nil {
					shared.LogError("Error printing short response", "error", err)
				}
			case "table":
				if err := shared.PrintSimpleProjectsTable(pagedResult); err != nil {
					shared.HandleError(cmd, err)
				}
			case "custom":
				maxColumns, _ := cmd.Flags().GetInt("max-columns")
				if maxColumns <= 0 {
					maxColumns = 4 // Default to 4 columns
				}
				if err := shared.PrintCustomTable(pagedResult, maxColumns); err != nil {
					shared.HandleError(cmd, err)
				}
			}

		default:
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, fmt.Sprintf("unsupported client type: %T", clientVersion), nil))
			return
		}
	},
}

// Create team command
var createTeamCmd = &cobra.Command{
	Use:   "create",
	Short: "Create a new team",
	Long:  `Create a new team. If the team is a Client team, you need to provide the Client id.`,
	Run: func(cmd *cobra.Command, args []string) {
		clientVersion := shared.GetVersionedApiClient()
		if clientVersion == nil {
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeConfigInvalid, "failed to initialize API client", nil))
			return
		}

		// Type switch to handle different client versions
		switch client := clientVersion.(type) {
		case *v2_2.Client:
			if client.PentesterOps == nil {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, "PentesterOps is nil for v2.2 client", nil))
				return
			}

			// Get flag values
			body, _ := cmd.Flags().GetString("body")

			// Parse body if provided
			var requestBody interface{}
			if body != "" {
				if err := json.Unmarshal([]byte(body), &requestBody); err != nil {
					shared.LogError("Error: failed to parse body JSON", "error", err)
					return
				}
			}

			result, err := client.PentesterOps.ApiV22PentesterTeamsPost(requestBody)
			if err != nil {
				shared.LogError("Error: failed to create team", "error", err)
				return
			}

			// Print the result
			if err := shared.PrintJSONResponse(result); err != nil {
				shared.LogError("Error printing response", "error", err)
			}

		default:
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, fmt.Sprintf("unsupported client type: %T", clientVersion), nil))
			return
		}
	},
}

// Get team by ID command
var getTeamCmd = &cobra.Command{
	Use:   "get [team-id]",
	Short: "Get a team by ID",
	Long:  `Retrieve detailed information about a specific team by its ID.`,
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		clientVersion := shared.GetVersionedApiClient()
		if clientVersion == nil {
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeConfigInvalid, "failed to initialize API client", nil))
			return
		}

		teamID := args[0]

		// Type switch to handle different client versions
		switch client := clientVersion.(type) {
		case *v2_2.Client:
			if client.PentesterOps == nil {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, "PentesterOps is nil for v2.2 client", nil))
				return
			}

			result, err := client.PentesterOps.ApiV22PentesterTeamsByIdGet(teamID)
			if err != nil {
				shared.LogError("Error: failed to get team", "teamID", teamID, "error", err)
				return
			}

			// Print the result
			if err := shared.PrintJSONResponse(result); err != nil {
				shared.LogError("Error printing response", "error", err)
			}

		default:
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, fmt.Sprintf("unsupported client type: %T", clientVersion), nil))
			return
		}
	},
}

// Update team command
var updateTeamCmd = &cobra.Command{
	Use:   "update [team-id]",
	Short: "Update an existing team",
	Long:  `Update an existing team. Cannot change the Client id of a Team.`,
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		clientVersion := shared.GetVersionedApiClient()
		if clientVersion == nil {
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeConfigInvalid, "failed to initialize API client", nil))
			return
		}

		teamID := args[0]

		// Type switch to handle different client versions
		switch client := clientVersion.(type) {
		case *v2_2.Client:
			if client.PentesterOps == nil {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, "PentesterOps is nil for v2.2 client", nil))
				return
			}

			// Get flag values
			body, _ := cmd.Flags().GetString("body")

			// Parse body if provided
			var requestBody interface{}
			if body != "" {
				if err := json.Unmarshal([]byte(body), &requestBody); err != nil {
					shared.LogError("Error: failed to parse body JSON", "error", err)
					return
				}
			}

			result, err := client.PentesterOps.ApiV22PentesterTeamsByIdPut(teamID, requestBody)
			if err != nil {
				shared.LogError("Error: failed to update team", "teamID", teamID, "error", err)
				return
			}

			// Print the result
			if err := shared.PrintJSONResponse(result); err != nil {
				shared.LogError("Error printing response", "error", err)
			}

		default:
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, fmt.Sprintf("unsupported client type: %T", clientVersion), nil))
			return
		}
	},
}

// Delete team command
var deleteTeamCmd = &cobra.Command{
	Use:   "delete [team-id]",
	Short: "Delete a team by ID",
	Long:  `Delete a specific team by its ID.`,
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		clientVersion := shared.GetVersionedApiClient()
		if clientVersion == nil {
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeConfigInvalid, "failed to initialize API client", nil))
			return
		}

		teamID := args[0]

		// Type switch to handle different client versions
		switch client := clientVersion.(type) {
		case *v2_2.Client:
			if client.PentesterOps == nil {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, "PentesterOps is nil for v2.2 client", nil))
				return
			}

			result, err := client.PentesterOps.ApiV22PentesterTeamsByIdDelete(teamID)
			if err != nil {
				shared.LogError("Error: failed to delete team", "teamID", teamID, "error", err)
				return
			}

			// Print the result
			if err := shared.PrintJSONResponse(result); err != nil {
				shared.LogError("Error printing response", "error", err)
			}

		default:
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, fmt.Sprintf("unsupported client type: %T", clientVersion), nil))
			return
		}
	},
}

// Initialize teams commands
func initTeamsCommands() {
	// Add subcommands to teams
	teamsCmd.AddCommand(listTeamsCmd)
	teamsCmd.AddCommand(createTeamCmd)
	teamsCmd.AddCommand(getTeamCmd)
	teamsCmd.AddCommand(updateTeamCmd)
	teamsCmd.AddCommand(deleteTeamCmd)

	// List command flags
	listTeamsCmd.Flags().String("project-id", "", "Filter by project ID")
	listTeamsCmd.Flags().String("exclude-project-id", "", "Exclude teams from specific project ID")
	listTeamsCmd.Flags().String("client-id", "", "Filter by client ID")
	listTeamsCmd.Flags().String("team-type", "", "Filter by team type")
	listTeamsCmd.Flags().Int("max-results", 50, "Maximum number of results to return")
	listTeamsCmd.Flags().Int("skip-count", 0, "Number of results to skip")
	listTeamsCmd.Flags().String("filter", "", "Filter string")
	listTeamsCmd.Flags().String("output", "table", "Output format (json, short, table, custom)")
	listTeamsCmd.Flags().Int("max-columns", 4, "Maximum number of columns for custom table output")

	// Create command flags
	createTeamCmd.Flags().String("body", "", "JSON body for the request")

	// Update command flags
	updateTeamCmd.Flags().String("body", "", "JSON body for the request")
}
