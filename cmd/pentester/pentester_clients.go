package pentester

import (
	"fmt"
	"strings"

	"github.com/spf13/cobra"
	"github.com/yourusername/cyverApiCli/cmd/shared"
	"github.com/yourusername/cyverApiCli/internal/api/versions/v2_2"
	"github.com/yourusername/cyverApiCli/internal/errors"
)

// Clients command group
var clientsCmd = &cobra.Command{
	Use:   "clients",
	Short: "Manage client operations",
	Long:  `Manage client information and operations for pentesters.`,
}

// List clients command
var listPentesterClientsCmd = &cobra.Command{
	Use:   "list",
	Short: "List all clients (pentester view)",
	Long:  `Retrieve a list of all clients in the system using pentester operations.`,
	Run: func(cmd *cobra.Command, args []string) {
		// Get flag values with defaults
		status, _ := cmd.Flags().GetString("status")
		labelIdList, _ := cmd.Flags().GetString("label-id-list")
		maxResults, _ := cmd.Flags().GetInt("max-results")
		skipCount, _ := cmd.Flags().GetInt("skip-count")
		filter, _ := cmd.Flags().GetString("filter")

		clientVersion := shared.GetVersionedApiClient()
		if clientVersion == nil {
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeConfigInvalid, "failed to initialize API client", nil))
			return
		}

		// Type switch to handle different client versions
		switch client := clientVersion.(type) {
		case *v2_2.Client:
			if client.PentesterOps == nil {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, "PentesterOps is nil for v2.2 client", nil))
				return
			}

			clients, err := client.PentesterOps.ApiV22PentesterClientsGet(status, labelIdList, maxResults, skipCount, filter)
			if err != nil {
				shared.LogError("Error: failed to list clients", "error", err)
				return
			}

			// Get the output format option
			outputFormat, _ := cmd.Flags().GetString("output")

			// Validate output format
			validFormats := []string{"json", "table", "custom"}
			isValidFormat := false
			for _, format := range validFormats {
				if outputFormat == format {
					isValidFormat = true
					break
				}
			}

			if !isValidFormat {
				shared.LogError("Error: Invalid output format '%s'. Valid options are: %s",
					outputFormat, strings.Join(validFormats, ", "))
				return
			}

			// Use the output format-specific function
			switch outputFormat {
			case "json":
				if err := shared.PrintJSONResponse(clients); err != nil {
					shared.LogError("Error printing full JSON response", "error", err)
				}
			case "table":
				if err := shared.PrintClientsTable(clients); err != nil {
					shared.LogError("Error printing table response", "error", err)
				}
			case "custom":
				maxColumns, _ := cmd.Flags().GetInt("max-columns")
				if maxColumns <= 0 {
					maxColumns = 4 // Default to 4 columns
				}
				if err := shared.PrintCustomTable(clients, maxColumns); err != nil {
					shared.LogError("Error printing custom table response", "error", err)
				}
			}

		default:
			shared.LogError("Error: unsupported client type: %T", clientVersion)
			return
		}
	},
}

// Get client by ID command
var getClientCmd = &cobra.Command{
	Use:   "get [client-id]",
	Short: "Get client by ID (pentester view)",
	Long:  `Retrieve detailed information about a specific client using pentester operations.`,
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		clientID := args[0]

		clientVersion := shared.GetVersionedApiClient()
		if clientVersion == nil {
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeConfigInvalid, "failed to initialize API client", nil))
			return
		}

		// Type switch to handle different client versions
		switch client := clientVersion.(type) {
		case *v2_2.Client:
			if client.PentesterOps == nil {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, "PentesterOps is nil for v2.2 client", nil))
				return
			}

			response, err := client.PentesterOps.ApiV22PentesterClientsByIdGet(clientID)
			if err != nil {
				shared.LogError("Error: failed to get client", "error", err)
				return
			}

			// Get the output format option
			outputFormat, _ := cmd.Flags().GetString("output")

			// Validate output format
			validFormats := []string{"json", "table", "custom"}
			isValidFormat := false
			for _, format := range validFormats {
				if outputFormat == format {
					isValidFormat = true
					break
				}
			}

			if !isValidFormat {
				shared.LogError("Error: Invalid output format '%s'. Valid options are: %s",
					outputFormat, strings.Join(validFormats, ", "))
				return
			}

			if err != nil {
				shared.LogError("Error: failed to get client", "error", err)
				return
			}

			// Use the output format-specific function
			switch outputFormat {
			case "json":
				if err := shared.PrintJSONResponse(response); err != nil {
					shared.LogError("Error printing full JSON response", "error", err)
				}
			case "table":
				if err := shared.PrintClientsTable(response); err != nil {
					shared.LogError("Error printing table response", "error", err)
				}
			case "custom":
				maxColumns, _ := cmd.Flags().GetInt("max-columns")
				if maxColumns <= 0 {
					maxColumns = 4 // Default to 4 columns
				}
				if err := shared.PrintCustomTable(response, maxColumns); err != nil {
					shared.LogError("Error printing custom table response", "error", err)
				}
			}

		default:
			shared.LogError("Error: unsupported client type: %T", clientVersion)
			return
		}
	},
}

// Create client command
var createClientCmd = &cobra.Command{
	Use:   "create",
	Short: "Create a new client (pentester view)",
	Long:  `Create a new client with the specified details using pentester operations.`,
	Run: func(cmd *cobra.Command, args []string) {
		// Get client data from flags
		name, _ := cmd.Flags().GetString("name")
		description, _ := cmd.Flags().GetString("description")
		status, _ := cmd.Flags().GetString("status")

		if name == "" {
			shared.LogError("Error: name is required")
			return
		}

		// Create client request body
		clientBody := map[string]interface{}{
			"name":        name,
			"description": description,
			"status":      status,
		}

		clientVersion := shared.GetVersionedApiClient()
		if clientVersion == nil {
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeConfigInvalid, "failed to initialize API client", nil))
			return
		}

		// Type switch to handle different client versions
		switch client := clientVersion.(type) {
		case *v2_2.Client:
			if client.PentesterOps == nil {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, "PentesterOps is nil for v2.2 client", nil))
				return
			}

			_, err := client.PentesterOps.ApiV22PentesterClientsPost(clientBody)
			if err != nil {
				shared.LogError("Error: failed to create client", "error", err)
				return
			}

			fmt.Printf("Successfully created client\n")

		default:
			shared.LogError("Error: unsupported client type: %T", clientVersion)
			return
		}
	},
}

// Update client command
var updateClientCmd = &cobra.Command{
	Use:   "update [client-id]",
	Short: "Update a client (pentester view)",
	Long:  `Update an existing client using pentester operations.`,
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		clientID := args[0]

		// Get update data from flags
		name, _ := cmd.Flags().GetString("name")
		description, _ := cmd.Flags().GetString("description")
		status, _ := cmd.Flags().GetString("status")

		// Create update request body
		updateBody := map[string]interface{}{}
		if name != "" {
			updateBody["name"] = name
		}
		if description != "" {
			updateBody["description"] = description
		}
		if status != "" {
			updateBody["status"] = status
		}

		clientVersion := shared.GetVersionedApiClient()
		if clientVersion == nil {
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeConfigInvalid, "failed to initialize API client", nil))
			return
		}

		// Type switch to handle different client versions
		switch client := clientVersion.(type) {
		case *v2_2.Client:
			if client.PentesterOps == nil {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, "PentesterOps is nil for v2.2 client", nil))
				return
			}

			_, err := client.PentesterOps.ApiV22PentesterClientsByIdPut(clientID, updateBody)
			if err != nil {
				shared.LogError("Error: failed to update client", "error", err)
				return
			}

			fmt.Printf("Successfully updated client %s\n", clientID)

		default:
			shared.LogError("Error: unsupported client type: %T", clientVersion)
			return
		}
	},
}

// Delete client command
var deleteClientCmd = &cobra.Command{
	Use:   "delete [client-id]",
	Short: "Delete a client (pentester view)",
	Long:  `Delete a client by its ID using pentester operations.`,
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		clientID := args[0]

		clientVersion := shared.GetVersionedApiClient()
		if clientVersion == nil {
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeConfigInvalid, "failed to initialize API client", nil))
			return
		}

		// Type switch to handle different client versions
		switch client := clientVersion.(type) {
		case *v2_2.Client:
			if client.PentesterOps == nil {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, "PentesterOps is nil for v2.2 client", nil))
				return
			}

			_, err := client.PentesterOps.ApiV22PentesterClientsByIdDelete(clientID)
			if err != nil {
				shared.LogError("Error: failed to delete client", "error", err)
				return
			}

			fmt.Printf("Successfully deleted client %s\n", clientID)

		default:
			shared.LogError("Error: unsupported client type: %T", clientVersion)
			return
		}
	},
}

// Get client assets command
var getClientAssetsCmd = &cobra.Command{
	Use:   "assets [client-id]",
	Short: "Get client assets (pentester view)",
	Long:  `Retrieve the assets for a specific client using pentester operations.`,
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		clientID := args[0]

		// Get flag values with defaults
		typeList, _ := cmd.Flags().GetString("type-list")
		maxResults, _ := cmd.Flags().GetInt("max-results")
		skipCount, _ := cmd.Flags().GetInt("skip-count")
		filter, _ := cmd.Flags().GetString("filter")

		clientVersion := shared.GetVersionedApiClient()
		if clientVersion == nil {
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeConfigInvalid, "failed to initialize API client", nil))
			return
		}

		// Type switch to handle different client versions
		switch client := clientVersion.(type) {
		case *v2_2.Client:
			if client.PentesterOps == nil {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, "PentesterOps is nil for v2.2 client", nil))
				return
			}

			response, err := client.PentesterOps.ApiV22PentesterClientsByIdAssetsGet(clientID, typeList, maxResults, skipCount, filter)
			if err != nil {
				shared.LogError("Error: failed to get client assets", "error", err)
				return
			}

			// Get the output format option
			outputFormat, _ := cmd.Flags().GetString("output")

			// Validate output format
			validFormats := []string{"json", "table", "custom"}
			isValidFormat := false
			for _, format := range validFormats {
				if outputFormat == format {
					isValidFormat = true
					break
				}
			}

			if !isValidFormat {
				shared.LogError("Error: Invalid output format '%s'. Valid options are: %s",
					outputFormat, strings.Join(validFormats, ", "))
				return
			}

			if err != nil {
				shared.LogError("Error: failed to get client assets", "error", err)
				return
			}

			// Use the output format-specific function
			switch outputFormat {
			case "json":
				if err := shared.PrintJSONResponse(response); err != nil {
					shared.LogError("Error printing full JSON response", "error", err)
				}
			case "table":
				if err := shared.PrintClientsTable(response); err != nil {
					shared.LogError("Error printing table response", "error", err)
				}
			case "custom":
				maxColumns, _ := cmd.Flags().GetInt("max-columns")
				if maxColumns <= 0 {
					maxColumns = 4 // Default to 4 columns
				}
				if err := shared.PrintCustomTable(response, maxColumns); err != nil {
					shared.LogError("Error printing custom table response", "error", err)
				}
			}

		default:
			shared.LogError("Error: unsupported client type: %T", clientVersion)
			return
		}
	},
}

// Create client asset command
var createClientAssetCmd = &cobra.Command{
	Use:   "create-asset [client-id]",
	Short: "Create a new asset for client (pentester view)",
	Long:  `Create a new asset for a specific client using pentester operations.`,
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		clientID := args[0]

		// Get asset data from flags
		name, _ := cmd.Flags().GetString("name")
		description, _ := cmd.Flags().GetString("description")
		assetType, _ := cmd.Flags().GetString("type")
		ipAddress, _ := cmd.Flags().GetString("ip-address")

		if name == "" {
			shared.LogError("Error: name is required")
			return
		}

		// Create asset request body
		assetBody := map[string]interface{}{
			"name":        name,
			"description": description,
			"type":        assetType,
			"ipAddress":   ipAddress,
		}

		clientVersion := shared.GetVersionedApiClient()
		if clientVersion == nil {
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeConfigInvalid, "failed to initialize API client", nil))
			return
		}

		// Type switch to handle different client versions
		switch client := clientVersion.(type) {
		case *v2_2.Client:
			if client.PentesterOps == nil {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, "PentesterOps is nil for v2.2 client", nil))
				return
			}

			response, err := client.PentesterOps.ApiV22PentesterClientsByIdAssetsPost(clientID, assetBody)
			if err != nil {
				shared.LogError("Error: failed to create client asset", "error", err)
				return
			}

			fmt.Printf("Successfully created asset for client %s\n", clientID)
			if response != nil {
				fmt.Printf("Asset ID: %v\n", response)
			}

		default:
			shared.LogError("Error: unsupported client type: %T", clientVersion)
			return
		}
	},
}

// Update client asset command
var updateClientAssetCmd = &cobra.Command{
	Use:   "update-asset [client-id] [asset-id]",
	Short: "Update a client asset (pentester view)",
	Long:  `Update an existing asset for a specific client using pentester operations.`,
	Args:  cobra.ExactArgs(2),
	Run: func(cmd *cobra.Command, args []string) {
		clientID := args[0]
		assetID := args[1]

		// Get update data from flags
		name, _ := cmd.Flags().GetString("name")
		description, _ := cmd.Flags().GetString("description")
		assetType, _ := cmd.Flags().GetString("type")
		ipAddress, _ := cmd.Flags().GetString("ip-address")

		// Create update request body
		updateBody := map[string]interface{}{}
		if name != "" {
			updateBody["name"] = name
		}
		if description != "" {
			updateBody["description"] = description
		}
		if assetType != "" {
			updateBody["type"] = assetType
		}
		if ipAddress != "" {
			updateBody["ipAddress"] = ipAddress
		}

		clientVersion := shared.GetVersionedApiClient()
		if clientVersion == nil {
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeConfigInvalid, "failed to initialize API client", nil))
			return
		}

		// Type switch to handle different client versions
		switch client := clientVersion.(type) {
		case *v2_2.Client:
			if client.PentesterOps == nil {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, "PentesterOps is nil for v2.2 client", nil))
				return
			}

			_, err := client.PentesterOps.ApiV22PentesterClientsByIdAssetsByAssetidPut(clientID, assetID, updateBody)
			if err != nil {
				shared.LogError("Error: failed to update client asset", "error", err)
				return
			}

			fmt.Printf("Successfully updated asset %s for client %s\n", assetID, clientID)

		default:
			shared.LogError("Error: unsupported client type: %T", clientVersion)
			return
		}
	},
}

// Initialize function to register all clients commands
func init() {
	// Add flags to list clients command
	listPentesterClientsCmd.Flags().StringP("output", "o", "table", "Output format (json, table, custom)")
	listPentesterClientsCmd.Flags().Int("max-columns", 4, "Maximum number of columns for custom table output")
	listPentesterClientsCmd.Flags().String("status", "", "Filter by status")
	listPentesterClientsCmd.Flags().String("label-id-list", "", "Filter by label ID list")
	listPentesterClientsCmd.Flags().Int("max-results", 10, "Maximum number of results to return")
	listPentesterClientsCmd.Flags().Int("skip-count", 0, "Number of results to skip")
	listPentesterClientsCmd.Flags().String("filter", "", "Filter string for searching")

	// Add flags to get client command
	getClientCmd.Flags().StringP("output", "o", "table", "Output format (json, table, custom)")
	getClientCmd.Flags().Int("max-columns", 4, "Maximum number of columns for custom table output")

	// Add flags to create client command
	createClientCmd.Flags().String("name", "", "Client name (required)")
	createClientCmd.Flags().String("description", "", "Client description")
	createClientCmd.Flags().String("status", "", "Client status")

	// Add flags to update client command
	updateClientCmd.Flags().String("name", "", "Client name")
	updateClientCmd.Flags().String("description", "", "Client description")
	updateClientCmd.Flags().String("status", "", "Client status")

	// Add flags to get client assets command
	getClientAssetsCmd.Flags().StringP("output", "o", "table", "Output format (json, table, custom)")
	getClientAssetsCmd.Flags().Int("max-columns", 4, "Maximum number of columns for custom table output")
	getClientAssetsCmd.Flags().String("type-list", "", "Filter by asset type list")
	getClientAssetsCmd.Flags().Int("max-results", 10, "Maximum number of results to return")
	getClientAssetsCmd.Flags().Int("skip-count", 0, "Number of results to skip")
	getClientAssetsCmd.Flags().String("filter", "", "Filter string for searching")

	// Add flags to create client asset command
	createClientAssetCmd.Flags().String("name", "", "Asset name (required)")
	createClientAssetCmd.Flags().String("description", "", "Asset description")
	createClientAssetCmd.Flags().String("type", "", "Asset type")
	createClientAssetCmd.Flags().String("ip-address", "", "Asset IP address")

	// Add flags to update client asset command
	updateClientAssetCmd.Flags().String("name", "", "Asset name")
	updateClientAssetCmd.Flags().String("description", "", "Asset description")
	updateClientAssetCmd.Flags().String("type", "", "Asset type")
	updateClientAssetCmd.Flags().String("ip-address", "", "Asset IP address")

	// Add all commands to the clients command group
	clientsCmd.AddCommand(listPentesterClientsCmd)
	clientsCmd.AddCommand(getClientCmd)
	clientsCmd.AddCommand(createClientCmd)
	clientsCmd.AddCommand(updateClientCmd)
	clientsCmd.AddCommand(deleteClientCmd)
	clientsCmd.AddCommand(getClientAssetsCmd)
	clientsCmd.AddCommand(createClientAssetCmd)
	clientsCmd.AddCommand(updateClientAssetCmd)

	// Commands will be added to pentester command group via InitPentesterCommands
}
