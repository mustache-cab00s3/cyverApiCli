package pentester

import (
	"fmt"
	"strings"

	"github.com/spf13/cobra"
	"github.com/yourusername/cyverApiCli/cmd/shared"
	"github.com/yourusername/cyverApiCli/internal/api/versions/v2_2"
	"github.com/yourusername/cyverApiCli/internal/errors"
)

// Projects command group
var projectsCmd = &cobra.Command{
	Use:   "projects",
	Short: "Manage project operations",
	Long:  `Manage project information and operations for pentesters.`,
}

// List projects command
var listProjectsCmd = &cobra.Command{
	Use:   "list",
	Short: "List projects (pentester view)",
	Long:  `Retrieve a paginated list of projects with optional filtering using pentester operations.`,
	Run: func(cmd *cobra.Command, args []string) {
		clientVersion := shared.GetVersionedApiClient()
		if clientVersion == nil {
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeConfigInvalid, "failed to initialize API client", nil))
			return
		}

		// Type switch to handle different client versions
		switch client := clientVersion.(type) {
		case *v2_2.Client:
			if client.PentesterOps == nil {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, "PentesterOps is nil for v2.2 client", nil))
				return
			}

			// Get flag values with defaults
			clientID, _ := cmd.Flags().GetString("client-id")
			status, _ := cmd.Flags().GetString("status")
			labels, _ := cmd.Flags().GetString("labels")
			maxResults, _ := cmd.Flags().GetInt("max-results")
			skipCount, _ := cmd.Flags().GetInt("skip-count")
			filter, _ := cmd.Flags().GetString("filter")

			pagedResult, err := client.PentesterOps.ApiV22PentesterProjectsGet(clientID, status, labels, maxResults, skipCount, filter)
			if err != nil {
				shared.HandleError(cmd, err)
				return
			}

			// Get the output format option and validate it
			outputFormat, _ := cmd.Flags().GetString("output")

			// Validate output format
			validFormats := []string{"json", "short", "table", "custom"}
			isValidFormat := false
			for _, format := range validFormats {
				if outputFormat == format {
					isValidFormat = true
					break
				}
			}

			if !isValidFormat {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeValidationFailed,
					fmt.Sprintf("Invalid output format '%s'. Valid options are: %s", outputFormat, strings.Join(validFormats, ", ")), nil))
				return
			}

			// Use the output format-specific function
			switch outputFormat {
			case "json":
				if err := shared.PrintJSONResponse(pagedResult); err != nil {
					shared.HandleError(cmd, err)
				}
			case "short":
				if err := shared.PrintSimpleProjectsList(pagedResult); err != nil {
					shared.HandleError(cmd, err)
				}
			case "table":
				if err := shared.PrintSimpleProjectsTable(pagedResult); err != nil {
					shared.HandleError(cmd, err)
				}
			case "custom":
				maxColumns, _ := cmd.Flags().GetInt("max-columns")
				if maxColumns <= 0 {
					maxColumns = 4 // Default to 4 columns
				}
				if err := shared.PrintCustomTable(pagedResult, maxColumns); err != nil {
					shared.HandleError(cmd, err)
				}
			}

		default:
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, fmt.Sprintf("unsupported client type: %T", clientVersion), nil))
			return
		}
	},
}

// Create project command
var createProjectCmd = &cobra.Command{
	Use:   "create",
	Short: "Create a new project (pentester view)",
	Long:  `Create a new project with the specified details using pentester operations.`,
	Run: func(cmd *cobra.Command, args []string) {
		name, _ := cmd.Flags().GetString("name")
		description, _ := cmd.Flags().GetString("description")
		clientID, _ := cmd.Flags().GetString("client-id")
		labels, _ := cmd.Flags().GetString("labels")
		triggerEvents, _ := cmd.Flags().GetBool("trigger-events")

		if name == "" {
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeValidationFailed, "name is required", nil))
			return
		}
		if clientID == "" {
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeValidationFailed, "client-id is required", nil))
			return
		}

		// Parse labels
		var labelIDs []string
		if labels != "" {
			labelIDs = strings.Split(labels, ",")
		}

		// Handle description pointer
		var descriptionPtr *string
		if description != "" {
			descriptionPtr = &description
		}

		project := &v2_2.CreateProjectRequestV2{
			Name:        name,
			Description: descriptionPtr,
			ClientID:    clientID,
			LabelIDs:    labelIDs,
		}

		clientVersion := shared.GetVersionedApiClient()
		if clientVersion == nil {
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeConfigInvalid, "failed to initialize API client", nil))
			return
		}

		// Type switch to handle different client versions
		switch client := clientVersion.(type) {
		case *v2_2.Client:
			if client.PentesterOps == nil {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, "PentesterOps is nil for v2.2 client", nil))
				return
			}

			_, err := client.PentesterOps.ApiV22PentesterProjectsPost(triggerEvents, project)
			if err != nil {
				shared.HandleError(cmd, err)
				return
			}

			fmt.Printf("Successfully created project\n")

		default:
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, fmt.Sprintf("unsupported client type: %T", clientVersion), nil))
			return
		}
	},
}

// Get project by ID command
var getProjectCmd = &cobra.Command{
	Use:   "get [project-id]",
	Short: "Get project by ID (pentester view)",
	Long:  `Retrieve detailed information about a specific project using pentester operations.`,
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		projectID := args[0]

		clientVersion := shared.GetVersionedApiClient()
		if clientVersion == nil {
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeConfigInvalid, "failed to initialize API client", nil))
			return
		}

		// Type switch to handle different client versions
		switch client := clientVersion.(type) {
		case *v2_2.Client:
			if client.PentesterOps == nil {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, "PentesterOps is nil for v2.2 client", nil))
				return
			}

			response, err := client.PentesterOps.ApiV22PentesterProjectsByIdGet(projectID)
			if err != nil {
				shared.HandleError(cmd, err)
				return
			}

			// Get the output format option
			outputFormat, _ := cmd.Flags().GetString("output")

			// Validate output format
			validFormats := []string{"json", "table", "custom"}
			isValidFormat := false
			for _, format := range validFormats {
				if outputFormat == format {
					isValidFormat = true
					break
				}
			}

			if !isValidFormat {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeValidationFailed,
					fmt.Sprintf("Invalid output format '%s'. Valid options are: %s", outputFormat, strings.Join(validFormats, ", ")), nil))
				return
			}

			if err != nil {
				shared.HandleError(cmd, err)
				return
			}

			// Use the output format-specific function
			switch outputFormat {
			case "json":
				if err := shared.PrintJSONResponse(response); err != nil {
					shared.HandleError(cmd, err)
				}
			case "table":
				if err := shared.PrintProjectTable(response); err != nil {
					shared.HandleError(cmd, err)
				}
			case "custom":
				maxColumns, _ := cmd.Flags().GetInt("max-columns")
				if maxColumns <= 0 {
					maxColumns = 4 // Default to 4 columns
				}
				if err := shared.PrintCustomTable(response, maxColumns); err != nil {
					shared.HandleError(cmd, err)
				}
			}

		default:
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, fmt.Sprintf("unsupported client type: %T", clientVersion), nil))
			return
		}
	},
}

// Delete project command
var deleteProjectCmd = &cobra.Command{
	Use:   "delete [project-id]",
	Short: "Delete a project (pentester view)",
	Long:  `Delete a project by its ID using pentester operations.`,
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		projectID := args[0]

		clientVersion := shared.GetVersionedApiClient()
		if clientVersion == nil {
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeConfigInvalid, "failed to initialize API client", nil))
			return
		}

		// Type switch to handle different client versions
		switch client := clientVersion.(type) {
		case *v2_2.Client:
			if client.PentesterOps == nil {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, "PentesterOps is nil for v2.2 client", nil))
				return
			}

			_, err := client.PentesterOps.ApiV22PentesterProjectsByIdDelete(projectID)
			if err != nil {
				shared.HandleError(cmd, err)
				return
			}

			fmt.Printf("Successfully deleted project %s\n", projectID)

		default:
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, fmt.Sprintf("unsupported client type: %T", clientVersion), nil))
			return
		}
	},
}

// Update project status command
var updateProjectStatusCmd = &cobra.Command{
	Use:   "update-status [project-id] [status]",
	Short: "Update project status (pentester view)",
	Long:  `Update the status of a project using pentester operations.`,
	Args:  cobra.ExactArgs(2),
	Run: func(cmd *cobra.Command, args []string) {
		projectID := args[0]
		status := args[1]
		triggerEvents, _ := cmd.Flags().GetBool("trigger-events")

		clientVersion := shared.GetVersionedApiClient()
		if clientVersion == nil {
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeConfigInvalid, "failed to initialize API client", nil))
			return
		}

		// Type switch to handle different client versions
		switch client := clientVersion.(type) {
		case *v2_2.Client:
			if client.PentesterOps == nil {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, "PentesterOps is nil for v2.2 client", nil))
				return
			}

			statusRequest := map[string]string{"status": status}
			_, err := client.PentesterOps.ApiV22PentesterProjectsByIdStatusPut(projectID, triggerEvents, statusRequest)
			if err != nil {
				shared.HandleError(cmd, err)
				return
			}

			fmt.Printf("Successfully updated project %s status to %s\n", projectID, status)

		default:
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, fmt.Sprintf("unsupported client type: %T", clientVersion), nil))
			return
		}
	},
}

// Set project assets command
var setProjectAssetsCmd = &cobra.Command{
	Use:   "set-assets [project-id] [asset-ids]",
	Short: "Set project assets (pentester view)",
	Long:  `Set the assets for a project using pentester operations. Asset IDs should be comma-separated.`,
	Args:  cobra.ExactArgs(2),
	Run: func(cmd *cobra.Command, args []string) {
		projectID := args[0]
		assetIDsStr := args[1]

		// Parse asset IDs
		assetIDs := strings.Split(assetIDsStr, ",")

		clientVersion := shared.GetVersionedApiClient()
		if clientVersion == nil {
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeConfigInvalid, "failed to initialize API client", nil))
			return
		}

		// Type switch to handle different client versions
		switch client := clientVersion.(type) {
		case *v2_2.Client:
			if client.PentesterOps == nil {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, "PentesterOps is nil for v2.2 client", nil))
				return
			}

			_, err := client.PentesterOps.ApiV22PentesterProjectsByIdAssetsPut(projectID, assetIDs)
			if err != nil {
				shared.HandleError(cmd, err)
				return
			}

			fmt.Printf("Successfully set %d assets for project %s\n", len(assetIDs), projectID)

		default:
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, fmt.Sprintf("unsupported client type: %T", clientVersion), nil))
			return
		}
	},
}

// Set project users command
var setProjectUsersCmd = &cobra.Command{
	Use:   "set-users [project-id] [user-ids]",
	Short: "Set project users (pentester view)",
	Long:  `Set the users for a project using pentester operations. User IDs should be comma-separated.`,
	Args:  cobra.ExactArgs(2),
	Run: func(cmd *cobra.Command, args []string) {
		projectID := args[0]
		userIDsStr := args[1]
		triggerEvents, _ := cmd.Flags().GetBool("trigger-events")

		// Parse user IDs
		userIDs := strings.Split(userIDsStr, ",")

		clientVersion := shared.GetVersionedApiClient()
		if clientVersion == nil {
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeConfigInvalid, "failed to initialize API client", nil))
			return
		}

		// Type switch to handle different client versions
		switch client := clientVersion.(type) {
		case *v2_2.Client:
			if client.PentesterOps == nil {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, "PentesterOps is nil for v2.2 client", nil))
				return
			}

			_, err := client.PentesterOps.ApiV22PentesterProjectsByIdUsersPut(projectID, triggerEvents, userIDs)
			if err != nil {
				shared.HandleError(cmd, err)
				return
			}

			fmt.Printf("Successfully set %d users for project %s\n", len(userIDs), projectID)

		default:
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, fmt.Sprintf("unsupported client type: %T", clientVersion), nil))
			return
		}
	},
}

// Set project teams command
var setProjectTeamsCmd = &cobra.Command{
	Use:   "set-teams [project-id] [team-ids]",
	Short: "Set project teams (pentester view)",
	Long:  `Set the teams for a project using pentester operations. Team IDs should be comma-separated.`,
	Args:  cobra.ExactArgs(2),
	Run: func(cmd *cobra.Command, args []string) {
		projectID := args[0]
		teamIDsStr := args[1]

		// Parse team IDs
		teamIDs := strings.Split(teamIDsStr, ",")

		clientVersion := shared.GetVersionedApiClient()
		if clientVersion == nil {
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeConfigInvalid, "failed to initialize API client", nil))
			return
		}

		// Type switch to handle different client versions
		switch client := clientVersion.(type) {
		case *v2_2.Client:
			if client.PentesterOps == nil {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, "PentesterOps is nil for v2.2 client", nil))
				return
			}

			_, err := client.PentesterOps.ApiV22PentesterProjectsByIdTeamsPut(projectID, teamIDs)
			if err != nil {
				shared.HandleError(cmd, err)
				return
			}

			fmt.Printf("Successfully set %d teams for project %s\n", len(teamIDs), projectID)

		default:
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, fmt.Sprintf("unsupported client type: %T", clientVersion), nil))
			return
		}
	},
}

// Get project checklists command
var getProjectChecklistsCmd = &cobra.Command{
	Use:   "checklists [project-id]",
	Short: "Get project checklists (pentester view)",
	Long:  `Retrieve the checklists for a specific project using pentester operations.`,
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		projectID := args[0]

		clientVersion := shared.GetVersionedApiClient()
		if clientVersion == nil {
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeConfigInvalid, "failed to initialize API client", nil))
			return
		}

		// Type switch to handle different client versions
		switch client := clientVersion.(type) {
		case *v2_2.Client:
			if client.PentesterOps == nil {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, "PentesterOps is nil for v2.2 client", nil))
				return
			}

			response, err := client.PentesterOps.ApiV22PentesterProjectsByIdChecklistsGet(projectID)
			if err != nil {
				shared.HandleError(cmd, err)
				return
			}

			// Get the output format option
			outputFormat, _ := cmd.Flags().GetString("output")

			// Validate output format
			validFormats := []string{"json", "table", "custom"}
			isValidFormat := false
			for _, format := range validFormats {
				if outputFormat == format {
					isValidFormat = true
					break
				}
			}

			if !isValidFormat {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeValidationFailed,
					fmt.Sprintf("Invalid output format '%s'. Valid options are: %s", outputFormat, strings.Join(validFormats, ", ")), nil))
				return
			}

			if err != nil {
				shared.HandleError(cmd, err)
				return
			}

			// Use the output format-specific function
			switch outputFormat {
			case "json":
				if err := shared.PrintJSONResponse(response); err != nil {
					shared.HandleError(cmd, err)
				}
			case "table":
				if err := shared.PrintChecklistsTable(response); err != nil {
					shared.HandleError(cmd, err)
				}
			case "custom":
				maxColumns, _ := cmd.Flags().GetInt("max-columns")
				if maxColumns <= 0 {
					maxColumns = 4 // Default to 4 columns
				}
				if err := shared.PrintCustomTable(response, maxColumns); err != nil {
					shared.HandleError(cmd, err)
				}
			}

		default:
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, fmt.Sprintf("unsupported client type: %T", clientVersion), nil))
			return
		}
	},
}

// Get project compliance norms command
var getProjectComplianceNormsCmd = &cobra.Command{
	Use:   "compliance-norms [project-id]",
	Short: "Get project compliance norms (pentester view)",
	Long:  `Retrieve the compliance norms for a specific project using pentester operations.`,
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		projectID := args[0]

		clientVersion := shared.GetVersionedApiClient()
		if clientVersion == nil {
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeConfigInvalid, "failed to initialize API client", nil))
			return
		}

		// Type switch to handle different client versions
		switch client := clientVersion.(type) {
		case *v2_2.Client:
			if client.PentesterOps == nil {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, "PentesterOps is nil for v2.2 client", nil))
				return
			}

			response, err := client.PentesterOps.ApiV22PentesterProjectsByIdComplianceNormsGet(projectID)
			if err != nil {
				shared.HandleError(cmd, err)
				return
			}

			// Get the output format option
			outputFormat, _ := cmd.Flags().GetString("output")

			// Validate output format
			validFormats := []string{"json", "table", "custom"}
			isValidFormat := false
			for _, format := range validFormats {
				if outputFormat == format {
					isValidFormat = true
					break
				}
			}

			if !isValidFormat {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeValidationFailed,
					fmt.Sprintf("Invalid output format '%s'. Valid options are: %s", outputFormat, strings.Join(validFormats, ", ")), nil))
				return
			}

			if err != nil {
				shared.HandleError(cmd, err)
				return
			}

			// Use the output format-specific function
			switch outputFormat {
			case "json":
				if err := shared.PrintJSONResponse(response); err != nil {
					shared.HandleError(cmd, err)
				}
			case "table":
				if err := shared.PrintComplianceNormsTable(response); err != nil {
					shared.HandleError(cmd, err)
				}
			case "custom":
				maxColumns, _ := cmd.Flags().GetInt("max-columns")
				if maxColumns <= 0 {
					maxColumns = 4 // Default to 4 columns
				}
				if err := shared.PrintCustomTable(response, maxColumns); err != nil {
					shared.HandleError(cmd, err)
				}
			}

		default:
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, fmt.Sprintf("unsupported client type: %T", clientVersion), nil))
			return
		}
	},
}

// Get project report versions command
var getProjectReportVersionsCmd = &cobra.Command{
	Use:   "report-versions [project-id]",
	Short: "Get project report versions (pentester view)",
	Long:  `Retrieve the report versions for a specific project using pentester operations.`,
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		projectID := args[0]

		clientVersion := shared.GetVersionedApiClient()
		if clientVersion == nil {
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeConfigInvalid, "failed to initialize API client", nil))
			return
		}

		// Type switch to handle different client versions
		switch client := clientVersion.(type) {
		case *v2_2.Client:
			if client.PentesterOps == nil {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, "PentesterOps is nil for v2.2 client", nil))
				return
			}

			response, err := client.PentesterOps.ApiV22PentesterProjectsByIdReportsVersionsGet(projectID)
			if err != nil {
				shared.HandleError(cmd, err)
				return
			}

			// Get the output format option
			outputFormat, _ := cmd.Flags().GetString("output")

			// Validate output format
			validFormats := []string{"json", "table", "custom"}
			isValidFormat := false
			for _, format := range validFormats {
				if outputFormat == format {
					isValidFormat = true
					break
				}
			}

			if !isValidFormat {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeValidationFailed,
					fmt.Sprintf("Invalid output format '%s'. Valid options are: %s", outputFormat, strings.Join(validFormats, ", ")), nil))
				return
			}

			if err != nil {
				shared.HandleError(cmd, err)
				return
			}

			// Use the output format-specific function
			switch outputFormat {
			case "json":
				if err := shared.PrintJSONResponse(response); err != nil {
					shared.HandleError(cmd, err)
				}
			case "table":
				if err := shared.PrintReportVersionsTable(response); err != nil {
					shared.HandleError(cmd, err)
				}
			case "custom":
				maxColumns, _ := cmd.Flags().GetInt("max-columns")
				if maxColumns <= 0 {
					maxColumns = 4 // Default to 4 columns
				}
				if err := shared.PrintCustomTable(response, maxColumns); err != nil {
					shared.HandleError(cmd, err)
				}
			}

		default:
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, fmt.Sprintf("unsupported client type: %T", clientVersion), nil))
			return
		}
	},
}

// Get project report command
var getProjectReportCmd = &cobra.Command{
	Use:   "report [project-id] [report-version]",
	Short: "Get project report (pentester view)",
	Long:  `Retrieve a specific report version for a project using pentester operations.`,
	Args:  cobra.ExactArgs(2),
	Run: func(cmd *cobra.Command, args []string) {
		projectID := args[0]
		reportVersion := args[1]

		clientVersion := shared.GetVersionedApiClient()
		if clientVersion == nil {
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeConfigInvalid, "failed to initialize API client", nil))
			return
		}

		// Type switch to handle different client versions
		switch client := clientVersion.(type) {
		case *v2_2.Client:
			if client.PentesterOps == nil {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, "PentesterOps is nil for v2.2 client", nil))
				return
			}

			response, err := client.PentesterOps.ApiV22PentesterProjectsByIdReportsByReportversionGet(projectID, reportVersion)
			if err != nil {
				shared.HandleError(cmd, err)
				return
			}

			// Get the output format option
			outputFormat, _ := cmd.Flags().GetString("output")

			// Validate output format
			validFormats := []string{"json", "table", "custom"}
			isValidFormat := false
			for _, format := range validFormats {
				if outputFormat == format {
					isValidFormat = true
					break
				}
			}

			if !isValidFormat {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeValidationFailed,
					fmt.Sprintf("Invalid output format '%s'. Valid options are: %s", outputFormat, strings.Join(validFormats, ", ")), nil))
				return
			}

			if err != nil {
				shared.HandleError(cmd, err)
				return
			}

			// Use the output format-specific function
			switch outputFormat {
			case "json":
				if err := shared.PrintJSONResponse(response); err != nil {
					shared.HandleError(cmd, err)
				}
			case "table":
				if err := shared.PrintReportTable(response); err != nil {
					shared.HandleError(cmd, err)
				}
			case "custom":
				maxColumns, _ := cmd.Flags().GetInt("max-columns")
				if maxColumns <= 0 {
					maxColumns = 4 // Default to 4 columns
				}
				if err := shared.PrintCustomTable(response, maxColumns); err != nil {
					shared.HandleError(cmd, err)
				}
			}

		default:
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, fmt.Sprintf("unsupported client type: %T", clientVersion), nil))
			return
		}
	},
}

// Upload project file command
var uploadProjectFileCmd = &cobra.Command{
	Use:   "upload-file [project-id] [file-path] [file-type]",
	Short: "Upload file to project (pentester view)",
	Long:  `Upload a file to a project using pentester operations. File type should be 'report' or 'attachment'.`,
	Args:  cobra.ExactArgs(3),
	Run: func(cmd *cobra.Command, args []string) {
		projectID := args[0]
		filePath := args[1]
		fileTypeStr := args[2]

		// Validate file type
		var fileType v2_2.FileTypeEnum
		switch fileTypeStr {
		case "report":
			fileType = v2_2.FileTypeEnum_Report
		case "attachment":
			fileType = v2_2.FileTypeEnum_Other
		default:
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeValidationFailed,
				fmt.Sprintf("Invalid file type '%s'. Valid options are: report, attachment", fileTypeStr), nil))
			return
		}

		clientVersion := shared.GetVersionedApiClient()
		if clientVersion == nil {
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeConfigInvalid, "failed to initialize API client", nil))
			return
		}

		// Type switch to handle different client versions
		switch client := clientVersion.(type) {
		case *v2_2.Client:
			if client.PentesterOps == nil {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, "PentesterOps is nil for v2.2 client", nil))
				return
			}

			// Create upload request body
			uploadBody := map[string]interface{}{
				"filePath": filePath,
				"fileType": int32(fileType),
			}
			_, err := client.PentesterOps.ApiV22PentesterProjectsByIdUploadFilePost(projectID, uploadBody)
			if err != nil {
				shared.HandleError(cmd, err)
				return
			}

			fmt.Printf("Successfully uploaded file %s to project %s as %s\n", filePath, projectID, fileTypeStr)

		default:
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, fmt.Sprintf("unsupported client type: %T", clientVersion), nil))
			return
		}
	},
}

// Initialize function to register all project commands
func init() {
	// Add flags to list projects command
	listProjectsCmd.Flags().String("client-id", "", "Filter by client ID")
	listProjectsCmd.Flags().String("status", "", "Filter by status")
	listProjectsCmd.Flags().String("labels", "", "Comma-separated list of label IDs")
	listProjectsCmd.Flags().Int("max-results", 10, "Maximum number of results")
	listProjectsCmd.Flags().Int("skip-count", 0, "Number of results to skip")
	listProjectsCmd.Flags().String("filter", "", "Filter string")
	listProjectsCmd.Flags().StringP("output", "o", "table", "Output format (json, short, table, custom)")
	listProjectsCmd.Flags().Int("max-columns", 4, "Maximum number of columns for custom table output")

	// Add flags to create project command
	createProjectCmd.Flags().String("name", "", "Project name (required)")
	createProjectCmd.Flags().String("description", "", "Project description")
	createProjectCmd.Flags().String("client-id", "", "Client ID (required)")
	createProjectCmd.Flags().String("labels", "", "Comma-separated list of label IDs")
	createProjectCmd.Flags().Bool("trigger-events", false, "Trigger events")

	// Add flags to get project command
	getProjectCmd.Flags().StringP("output", "o", "table", "Output format (json, table, custom)")
	getProjectCmd.Flags().Int("max-columns", 4, "Maximum number of columns for custom table output")

	// Add flags to update project status command
	updateProjectStatusCmd.Flags().Bool("trigger-events", false, "Trigger events")

	// Add flags to set project users command
	setProjectUsersCmd.Flags().Bool("trigger-events", false, "Trigger events")

	// Add flags to get project checklists command
	getProjectChecklistsCmd.Flags().StringP("output", "o", "table", "Output format (json, table, custom)")
	getProjectChecklistsCmd.Flags().Int("max-columns", 4, "Maximum number of columns for custom table output")

	// Add flags to get project compliance norms command
	getProjectComplianceNormsCmd.Flags().StringP("output", "o", "table", "Output format (json, table, custom)")
	getProjectComplianceNormsCmd.Flags().Int("max-columns", 4, "Maximum number of columns for custom table output")

	// Add flags to get project report versions command
	getProjectReportVersionsCmd.Flags().StringP("output", "o", "table", "Output format (json, table, custom)")
	getProjectReportVersionsCmd.Flags().Int("max-columns", 4, "Maximum number of columns for custom table output")

	// Add flags to get project report command
	getProjectReportCmd.Flags().StringP("output", "o", "table", "Output format (json, table, custom)")
	getProjectReportCmd.Flags().Int("max-columns", 4, "Maximum number of columns for custom table output")

	// Add all commands to the projects command group
	projectsCmd.AddCommand(listProjectsCmd)
	projectsCmd.AddCommand(createProjectCmd)
	projectsCmd.AddCommand(getProjectCmd)
	projectsCmd.AddCommand(deleteProjectCmd)
	projectsCmd.AddCommand(updateProjectStatusCmd)
	projectsCmd.AddCommand(setProjectAssetsCmd)
	projectsCmd.AddCommand(setProjectUsersCmd)
	projectsCmd.AddCommand(setProjectTeamsCmd)
	projectsCmd.AddCommand(getProjectChecklistsCmd)
	projectsCmd.AddCommand(getProjectComplianceNormsCmd)
	projectsCmd.AddCommand(getProjectReportVersionsCmd)
	projectsCmd.AddCommand(getProjectReportCmd)
	projectsCmd.AddCommand(uploadProjectFileCmd)

	// Commands will be added to pentester command group via InitPentesterCommands
}
