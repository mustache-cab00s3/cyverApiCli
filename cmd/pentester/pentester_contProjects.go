package pentester

import (
	"encoding/json"
	"fmt"
	"strings"

	"github.com/spf13/cobra"
	"github.com/yourusername/cyverApiCli/cmd/shared"
	"github.com/yourusername/cyverApiCli/internal/api/versions/v2_2"
	"github.com/yourusername/cyverApiCli/internal/errors"
)

// ContinuousProjects command group
var continuousProjectsCmd = &cobra.Command{
	Use:   "continuous-projects",
	Short: "Manage continuous project operations",
	Long:  `Manage continuous project information and operations for pentesters.`,
}

// List continuous projects command
var listContinuousProjectsCmd = &cobra.Command{
	Use:   "list",
	Short: "List continuous projects (pentester view)",
	Long:  `Retrieve a paginated list of continuous projects with optional filtering using pentester operations.`,
	Run: func(cmd *cobra.Command, args []string) {
		clientVersion := shared.GetVersionedApiClient()
		if clientVersion == nil {
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeConfigInvalid, "failed to initialize API client", nil))
			return
		}

		// Type switch to handle different client versions
		switch client := clientVersion.(type) {
		case *v2_2.Client:
			if client.PentesterOps == nil {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, "PentesterOps is nil for v2.2 client", nil))
				return
			}

			// Get flag values with defaults
			clientID, _ := cmd.Flags().GetString("client-id")
			status, _ := cmd.Flags().GetString("status")
			labels, _ := cmd.Flags().GetString("labels")
			maxResults, _ := cmd.Flags().GetInt("max-results")
			skipCount, _ := cmd.Flags().GetInt("skip-count")
			filter, _ := cmd.Flags().GetString("filter")

			pagedResult, err := client.PentesterOps.ApiV22PentesterContinuousProjectsGet(clientID, status, labels, maxResults, skipCount, filter)
			if err != nil {
				shared.HandleError(cmd, err)
				return
			}

			// Get the output format option and validate it
			outputFormat, _ := cmd.Flags().GetString("output")

			// Validate output format
			validFormats := []string{"json", "short", "table", "custom"}
			isValidFormat := false
			for _, format := range validFormats {
				if outputFormat == format {
					isValidFormat = true
					break
				}
			}

			if !isValidFormat {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeValidationFailed,
					fmt.Sprintf("Invalid output format '%s'. Valid options are: %s", outputFormat, strings.Join(validFormats, ", ")), nil))
				return
			}

			// Use the output format-specific function
			switch outputFormat {
			case "json":
				if err := shared.PrintJSONResponse(pagedResult); err != nil {
					shared.HandleError(cmd, err)
				}
			case "short":
				if err := shared.PrintSimpleProjectsList(pagedResult); err != nil {
					shared.LogError("Error printing short response", "error", err)
				}
			case "table":
				if err := shared.PrintSimpleProjectsTable(pagedResult); err != nil {
					shared.HandleError(cmd, err)
				}
			case "custom":
				maxColumns, _ := cmd.Flags().GetInt("max-columns")
				if maxColumns <= 0 {
					maxColumns = 4 // Default to 4 columns
				}
				if err := shared.PrintCustomTable(pagedResult, maxColumns); err != nil {
					shared.HandleError(cmd, err)
				}
			}

		default:
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, fmt.Sprintf("unsupported client type: %T", clientVersion), nil))
			return
		}
	},
}

// Create continuous project command
var createContinuousProjectCmd = &cobra.Command{
	Use:   "create",
	Short: "Create a new continuous project",
	Long:  `Create a new continuous project with the specified configuration.`,
	Run: func(cmd *cobra.Command, args []string) {
		clientVersion := shared.GetVersionedApiClient()
		if clientVersion == nil {
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeConfigInvalid, "failed to initialize API client", nil))
			return
		}

		// Type switch to handle different client versions
		switch client := clientVersion.(type) {
		case *v2_2.Client:
			if client.PentesterOps == nil {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, "PentesterOps is nil for v2.2 client", nil))
				return
			}

			// Get flag values
			triggerEvents, _ := cmd.Flags().GetBool("trigger-events")
			body, _ := cmd.Flags().GetString("body")

			// Parse body if provided
			var requestBody interface{}
			if body != "" {
				if err := json.Unmarshal([]byte(body), &requestBody); err != nil {
					shared.LogError("Error: failed to parse body JSON", "error", err)
					return
				}
			}

			result, err := client.PentesterOps.ApiV22PentesterContinuousProjectsPost(triggerEvents, requestBody)
			if err != nil {
				shared.HandleError(cmd, err)
				return
			}

			// Print the result
			if err := shared.PrintJSONResponse(result); err != nil {
				shared.LogError("Error printing response", "error", err)
			}

		default:
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, fmt.Sprintf("unsupported client type: %T", clientVersion), nil))
			return
		}
	},
}

// Get continuous project by ID command
var getContinuousProjectCmd = &cobra.Command{
	Use:   "get [project-id]",
	Short: "Get a continuous project by ID",
	Long:  `Retrieve detailed information about a specific continuous project by its ID.`,
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		clientVersion := shared.GetVersionedApiClient()
		if clientVersion == nil {
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeConfigInvalid, "failed to initialize API client", nil))
			return
		}

		projectID := args[0]

		// Type switch to handle different client versions
		switch client := clientVersion.(type) {
		case *v2_2.Client:
			if client.PentesterOps == nil {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, "PentesterOps is nil for v2.2 client", nil))
				return
			}

			result, err := client.PentesterOps.ApiV22PentesterContinuousProjectsByIdGet(projectID)
			if err != nil {
				shared.LogError("Error: failed to get continuous project", "projectID", projectID, "error", err)
				return
			}

			// Print the result
			if err := shared.PrintJSONResponse(result); err != nil {
				shared.LogError("Error printing response", "error", err)
			}

		default:
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, fmt.Sprintf("unsupported client type: %T", clientVersion), nil))
			return
		}
	},
}

// Delete continuous project command
var deleteContinuousProjectCmd = &cobra.Command{
	Use:   "delete [project-id]",
	Short: "Delete a continuous project by ID",
	Long:  `Delete a specific continuous project by its ID.`,
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		clientVersion := shared.GetVersionedApiClient()
		if clientVersion == nil {
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeConfigInvalid, "failed to initialize API client", nil))
			return
		}

		projectID := args[0]

		// Type switch to handle different client versions
		switch client := clientVersion.(type) {
		case *v2_2.Client:
			if client.PentesterOps == nil {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, "PentesterOps is nil for v2.2 client", nil))
				return
			}

			result, err := client.PentesterOps.ApiV22PentesterContinuousProjectsByIdDelete(projectID)
			if err != nil {
				shared.LogError("Error: failed to delete continuous project", "projectID", projectID, "error", err)
				return
			}

			// Print the result
			if err := shared.PrintJSONResponse(result); err != nil {
				shared.LogError("Error printing response", "error", err)
			}

		default:
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, fmt.Sprintf("unsupported client type: %T", clientVersion), nil))
			return
		}
	},
}

// Update continuous project status command
var updateContinuousProjectStatusCmd = &cobra.Command{
	Use:   "status [project-id]",
	Short: "Update the status of a continuous project",
	Long:  `Update the status of a specific continuous project by its ID.`,
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		clientVersion := shared.GetVersionedApiClient()
		if clientVersion == nil {
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeConfigInvalid, "failed to initialize API client", nil))
			return
		}

		projectID := args[0]

		// Type switch to handle different client versions
		switch client := clientVersion.(type) {
		case *v2_2.Client:
			if client.PentesterOps == nil {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, "PentesterOps is nil for v2.2 client", nil))
				return
			}

			// Get flag values
			triggerEvents, _ := cmd.Flags().GetBool("trigger-events")
			body, _ := cmd.Flags().GetString("body")

			// Parse body if provided
			var requestBody interface{}
			if body != "" {
				if err := json.Unmarshal([]byte(body), &requestBody); err != nil {
					shared.LogError("Error: failed to parse body JSON", "error", err)
					return
				}
			}

			result, err := client.PentesterOps.ApiV22PentesterContinuousProjectsByIdStatusPut(projectID, triggerEvents, requestBody)
			if err != nil {
				shared.LogError("Error: failed to update continuous project status", "projectID", projectID, "error", err)
				return
			}

			// Print the result
			if err := shared.PrintJSONResponse(result); err != nil {
				shared.LogError("Error printing response", "error", err)
			}

		default:
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, fmt.Sprintf("unsupported client type: %T", clientVersion), nil))
			return
		}
	},
}

// Set continuous project assets command
var setContinuousProjectAssetsCmd = &cobra.Command{
	Use:   "assets [project-id]",
	Short: "Set the assets of a continuous project",
	Long:  `Set the assets for a specific continuous project by its ID.`,
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		clientVersion := shared.GetVersionedApiClient()
		if clientVersion == nil {
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeConfigInvalid, "failed to initialize API client", nil))
			return
		}

		projectID := args[0]

		// Type switch to handle different client versions
		switch client := clientVersion.(type) {
		case *v2_2.Client:
			if client.PentesterOps == nil {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, "PentesterOps is nil for v2.2 client", nil))
				return
			}

			// Get flag values
			body, _ := cmd.Flags().GetString("body")

			// Parse body if provided
			var requestBody interface{}
			if body != "" {
				if err := json.Unmarshal([]byte(body), &requestBody); err != nil {
					shared.LogError("Error: failed to parse body JSON", "error", err)
					return
				}
			}

			result, err := client.PentesterOps.ApiV22PentesterContinuousProjectsByIdAssetsPut(projectID, requestBody)
			if err != nil {
				shared.LogError("Error: failed to set continuous project assets", "projectID", projectID, "error", err)
				return
			}

			// Print the result
			if err := shared.PrintJSONResponse(result); err != nil {
				shared.LogError("Error printing response", "error", err)
			}

		default:
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, fmt.Sprintf("unsupported client type: %T", clientVersion), nil))
			return
		}
	},
}

// Set continuous project users command
var setContinuousProjectUsersCmd = &cobra.Command{
	Use:   "users [project-id]",
	Short: "Set the users of a continuous project",
	Long:  `Set the users for a specific continuous project by its ID.`,
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		clientVersion := shared.GetVersionedApiClient()
		if clientVersion == nil {
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeConfigInvalid, "failed to initialize API client", nil))
			return
		}

		projectID := args[0]

		// Type switch to handle different client versions
		switch client := clientVersion.(type) {
		case *v2_2.Client:
			if client.PentesterOps == nil {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, "PentesterOps is nil for v2.2 client", nil))
				return
			}

			// Get flag values
			triggerEvents, _ := cmd.Flags().GetBool("trigger-events")
			body, _ := cmd.Flags().GetString("body")

			// Parse body if provided
			var requestBody interface{}
			if body != "" {
				if err := json.Unmarshal([]byte(body), &requestBody); err != nil {
					shared.LogError("Error: failed to parse body JSON", "error", err)
					return
				}
			}

			result, err := client.PentesterOps.ApiV22PentesterContinuousProjectsByIdUsersPut(projectID, triggerEvents, requestBody)
			if err != nil {
				shared.LogError("Error: failed to set continuous project users", "projectID", projectID, "error", err)
				return
			}

			// Print the result
			if err := shared.PrintJSONResponse(result); err != nil {
				shared.LogError("Error printing response", "error", err)
			}

		default:
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, fmt.Sprintf("unsupported client type: %T", clientVersion), nil))
			return
		}
	},
}

// Set continuous project teams command
var setContinuousProjectTeamsCmd = &cobra.Command{
	Use:   "teams [project-id]",
	Short: "Set the teams of a continuous project",
	Long:  `Set the teams for a specific continuous project by its ID.`,
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		clientVersion := shared.GetVersionedApiClient()
		if clientVersion == nil {
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeConfigInvalid, "failed to initialize API client", nil))
			return
		}

		projectID := args[0]

		// Type switch to handle different client versions
		switch client := clientVersion.(type) {
		case *v2_2.Client:
			if client.PentesterOps == nil {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, "PentesterOps is nil for v2.2 client", nil))
				return
			}

			// Get flag values
			body, _ := cmd.Flags().GetString("body")

			// Parse body if provided
			var requestBody interface{}
			if body != "" {
				if err := json.Unmarshal([]byte(body), &requestBody); err != nil {
					shared.LogError("Error: failed to parse body JSON", "error", err)
					return
				}
			}

			result, err := client.PentesterOps.ApiV22PentesterContinuousProjectsByIdTeamsPut(projectID, requestBody)
			if err != nil {
				shared.LogError("Error: failed to set continuous project teams", "projectID", projectID, "error", err)
				return
			}

			// Print the result
			if err := shared.PrintJSONResponse(result); err != nil {
				shared.LogError("Error printing response", "error", err)
			}

		default:
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, fmt.Sprintf("unsupported client type: %T", clientVersion), nil))
			return
		}
	},
}

// Get continuous project runs command
var getContinuousProjectRunsCmd = &cobra.Command{
	Use:   "runs [project-id]",
	Short: "Get all runs of a continuous project",
	Long:  `Retrieve all runs for a specific continuous project by its ID.`,
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		clientVersion := shared.GetVersionedApiClient()
		if clientVersion == nil {
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeConfigInvalid, "failed to initialize API client", nil))
			return
		}

		projectID := args[0]

		// Type switch to handle different client versions
		switch client := clientVersion.(type) {
		case *v2_2.Client:
			if client.PentesterOps == nil {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, "PentesterOps is nil for v2.2 client", nil))
				return
			}

			result, err := client.PentesterOps.ApiV22PentesterContinuousProjectsByIdRunsGet(projectID)
			if err != nil {
				shared.LogError("Error: failed to get continuous project runs", "projectID", projectID, "error", err)
				return
			}

			// Print the result
			if err := shared.PrintJSONResponse(result); err != nil {
				shared.LogError("Error printing response", "error", err)
			}

		default:
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, fmt.Sprintf("unsupported client type: %T", clientVersion), nil))
			return
		}
	},
}

// Complete continuous project run command
var completeContinuousProjectRunCmd = &cobra.Command{
	Use:   "complete-run [project-id]",
	Short: "Close the current run of a continuous project",
	Long:  `Close the current run of a specific continuous project by its ID.`,
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		clientVersion := shared.GetVersionedApiClient()
		if clientVersion == nil {
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeConfigInvalid, "failed to initialize API client", nil))
			return
		}

		projectID := args[0]

		// Type switch to handle different client versions
		switch client := clientVersion.(type) {
		case *v2_2.Client:
			if client.PentesterOps == nil {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, "PentesterOps is nil for v2.2 client", nil))
				return
			}

			// Get flag values
			triggerEvents, _ := cmd.Flags().GetBool("trigger-events")

			result, err := client.PentesterOps.ApiV22PentesterContinuousProjectsByIdCompleteRunPost(projectID, triggerEvents)
			if err != nil {
				shared.LogError("Error: failed to complete continuous project run", "projectID", projectID, "error", err)
				return
			}

			// Print the result
			if err := shared.PrintJSONResponse(result); err != nil {
				shared.LogError("Error printing response", "error", err)
			}

		default:
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, fmt.Sprintf("unsupported client type: %T", clientVersion), nil))
			return
		}
	},
}

// Get continuous project report versions command
var getContinuousProjectReportVersionsCmd = &cobra.Command{
	Use:   "reports-versions [project-id]",
	Short: "Get report versions of a continuous project",
	Long:  `Get a list of report versions for a specific continuous project by its ID.`,
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		clientVersion := shared.GetVersionedApiClient()
		if clientVersion == nil {
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeConfigInvalid, "failed to initialize API client", nil))
			return
		}

		projectID := args[0]

		// Type switch to handle different client versions
		switch client := clientVersion.(type) {
		case *v2_2.Client:
			if client.PentesterOps == nil {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, "PentesterOps is nil for v2.2 client", nil))
				return
			}

			result, err := client.PentesterOps.ApiV22PentesterContinuousProjectsByIdReportsVersionsGet(projectID)
			if err != nil {
				shared.LogError("Error: failed to get continuous project report versions", "projectID", projectID, "error", err)
				return
			}

			// Print the result
			if err := shared.PrintJSONResponse(result); err != nil {
				shared.LogError("Error printing response", "error", err)
			}

		default:
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, fmt.Sprintf("unsupported client type: %T", clientVersion), nil))
			return
		}
	},
}

// Get continuous project report command
var getContinuousProjectReportCmd = &cobra.Command{
	Use:   "report [project-id] [report-version]",
	Short: "Get report content of a continuous project",
	Long:  `Get the report content of a continuous project. If no version is supplied, default to the latest published version.`,
	Args:  cobra.ExactArgs(2),
	Run: func(cmd *cobra.Command, args []string) {
		clientVersion := shared.GetVersionedApiClient()
		if clientVersion == nil {
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeConfigInvalid, "failed to initialize API client", nil))
			return
		}

		projectID := args[0]
		reportVersion := args[1]

		// Type switch to handle different client versions
		switch client := clientVersion.(type) {
		case *v2_2.Client:
			if client.PentesterOps == nil {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, "PentesterOps is nil for v2.2 client", nil))
				return
			}

			result, err := client.PentesterOps.ApiV22PentesterContinuousProjectsByIdReportsByReportversionGet(projectID, reportVersion)
			if err != nil {
				shared.LogError("Error: failed to get continuous project report", "projectID", projectID, "reportVersion", reportVersion, "error", err)
				return
			}

			// Print the result
			if err := shared.PrintJSONResponse(result); err != nil {
				shared.LogError("Error printing response", "error", err)
			}

		default:
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, fmt.Sprintf("unsupported client type: %T", clientVersion), nil))
			return
		}
	},
}

// Upload file to continuous project command
var uploadFileToContinuousProjectCmd = &cobra.Command{
	Use:   "upload-file [project-id]",
	Short: "Upload a file to a continuous project",
	Long:  `Upload a file to a specific continuous project by its ID.`,
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		clientVersion := shared.GetVersionedApiClient()
		if clientVersion == nil {
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeConfigInvalid, "failed to initialize API client", nil))
			return
		}

		projectID := args[0]

		// Type switch to handle different client versions
		switch client := clientVersion.(type) {
		case *v2_2.Client:
			if client.PentesterOps == nil {
				shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, "PentesterOps is nil for v2.2 client", nil))
				return
			}

			// Get flag values
			body, _ := cmd.Flags().GetString("body")

			// Parse body if provided
			var requestBody interface{}
			if body != "" {
				if err := json.Unmarshal([]byte(body), &requestBody); err != nil {
					shared.LogError("Error: failed to parse body JSON", "error", err)
					return
				}
			}

			result, err := client.PentesterOps.ApiV22PentesterContinuousProjectsByIdUploadFilePost(projectID, requestBody)
			if err != nil {
				shared.LogError("Error: failed to upload file to continuous project", "projectID", projectID, "error", err)
				return
			}

			// Print the result
			if err := shared.PrintJSONResponse(result); err != nil {
				shared.LogError("Error printing response", "error", err)
			}

		default:
			shared.HandleError(cmd, errors.NewCyverError(errors.ErrCodeUnexpectedType, fmt.Sprintf("unsupported client type: %T", clientVersion), nil))
			return
		}
	},
}

// Initialize continuous projects commands
func initContinuousProjectsCommands() {
	// Add subcommands to continuous projects
	continuousProjectsCmd.AddCommand(listContinuousProjectsCmd)
	continuousProjectsCmd.AddCommand(createContinuousProjectCmd)
	continuousProjectsCmd.AddCommand(getContinuousProjectCmd)
	continuousProjectsCmd.AddCommand(deleteContinuousProjectCmd)
	continuousProjectsCmd.AddCommand(updateContinuousProjectStatusCmd)
	continuousProjectsCmd.AddCommand(setContinuousProjectAssetsCmd)
	continuousProjectsCmd.AddCommand(setContinuousProjectUsersCmd)
	continuousProjectsCmd.AddCommand(setContinuousProjectTeamsCmd)
	continuousProjectsCmd.AddCommand(getContinuousProjectRunsCmd)
	continuousProjectsCmd.AddCommand(completeContinuousProjectRunCmd)
	continuousProjectsCmd.AddCommand(getContinuousProjectReportVersionsCmd)
	continuousProjectsCmd.AddCommand(getContinuousProjectReportCmd)
	continuousProjectsCmd.AddCommand(uploadFileToContinuousProjectCmd)

	// List command flags
	listContinuousProjectsCmd.Flags().String("client-id", "", "Filter by client ID")
	listContinuousProjectsCmd.Flags().String("status", "", "Filter by status")
	listContinuousProjectsCmd.Flags().String("labels", "", "Filter by label IDs (comma-separated)")
	listContinuousProjectsCmd.Flags().Int("max-results", 50, "Maximum number of results to return")
	listContinuousProjectsCmd.Flags().Int("skip-count", 0, "Number of results to skip")
	listContinuousProjectsCmd.Flags().String("filter", "", "Filter string")
	listContinuousProjectsCmd.Flags().String("output", "table", "Output format (json, short, table, custom)")
	listContinuousProjectsCmd.Flags().Int("max-columns", 4, "Maximum number of columns for custom table output")

	// Create command flags
	createContinuousProjectCmd.Flags().Bool("trigger-events", false, "Whether to trigger events")
	createContinuousProjectCmd.Flags().String("body", "", "JSON body for the request")

	// Status update command flags
	updateContinuousProjectStatusCmd.Flags().Bool("trigger-events", false, "Whether to trigger events")
	updateContinuousProjectStatusCmd.Flags().String("body", "", "JSON body for the request")

	// Assets command flags
	setContinuousProjectAssetsCmd.Flags().String("body", "", "JSON body for the request")

	// Users command flags
	setContinuousProjectUsersCmd.Flags().Bool("trigger-events", false, "Whether to trigger events")
	setContinuousProjectUsersCmd.Flags().String("body", "", "JSON body for the request")

	// Teams command flags
	setContinuousProjectTeamsCmd.Flags().String("body", "", "JSON body for the request")

	// Complete run command flags
	completeContinuousProjectRunCmd.Flags().Bool("trigger-events", false, "Whether to trigger events")

	// Upload file command flags
	uploadFileToContinuousProjectCmd.Flags().String("body", "", "JSON body for the request")
}
