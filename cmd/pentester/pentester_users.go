package pentester

import (
	"fmt"
	"strings"

	"github.com/spf13/cobra"
	"github.com/yourusername/cyverApiCli/cmd/shared"
	"github.com/yourusername/cyverApiCli/internal/api/versions/v2_2"
)

// Users command group
var usersCmd = &cobra.Command{
	Use:   "users",
	Short: "Manage user operations",
	Long:  `Manage user information and operations for pentesters.`,
}

// List users command
var listUsersCmd = &cobra.Command{
	Use:   "list",
	Short: "List all pentesters",
	Long:  `Retrieve a list of all pentesters in the system.`,
	Run: func(cmd *cobra.Command, args []string) {
		// Get flag values with defaults
		clientID, _ := cmd.Flags().GetString("client-id")
		portalRole, _ := cmd.Flags().GetString("portal-role")
		maxResults, _ := cmd.Flags().GetInt("max-results")
		skipCount, _ := cmd.Flags().GetInt("skip-count")
		filter, _ := cmd.Flags().GetString("filter")

		clientVersion := shared.GetVersionedApiClient()
		if clientVersion == nil {
			shared.LogError("Error: failed to initialize API client")
			return
		}

		// Type switch to handle different client versions
		switch client := clientVersion.(type) {
		case *v2_2.Client:
			if client.PentesterOps == nil {
				shared.LogError("Error: PentesterOps is nil for v2.2 client")
				return
			}

			pentesters, err := client.PentesterOps.ApiV22PentesterUsersGet(clientID, portalRole, maxResults, skipCount, filter)
			if err != nil {
				shared.LogError("Error: failed to list pentesters", "error", err)
				return
			}

			// Get the output format option
			outputFormat, _ := cmd.Flags().GetString("output")

			// Validate output format
			validFormats := []string{"json", "table", "custom"}
			isValidFormat := false
			for _, format := range validFormats {
				if outputFormat == format {
					isValidFormat = true
					break
				}
			}

			if !isValidFormat {
				shared.LogError("Error: Invalid output format '%s'. Valid options are: %s",
					outputFormat, strings.Join(validFormats, ", "))
				return
			}

			// Use the output format-specific function
			switch outputFormat {
			case "json":
				if err := shared.PrintJSONResponse(pentesters); err != nil {
					shared.LogError("Error printing full JSON response", "error", err)
				}
			case "table":
				if err := shared.PrintPentestersTable(pentesters); err != nil {
					shared.LogError("Error printing table response", "error", err)
				}
			case "custom":
				maxColumns, _ := cmd.Flags().GetInt("max-columns")
				if maxColumns <= 0 {
					maxColumns = 4 // Default to 4 columns
				}
				if err := shared.PrintCustomTable(pentesters, maxColumns); err != nil {
					shared.LogError("Error printing custom table response", "error", err)
				}
			}

		default:
			shared.LogError("Error: unsupported client type: %T", clientVersion)
			return
		}
	},
}

// Create user command
var createPentesterUserCmd = &cobra.Command{
	Use:   "create",
	Short: "Create a new user (pentester view)",
	Long:  `Create a new user with the specified details using pentester operations.`,
	Run: func(cmd *cobra.Command, args []string) {
		// Get user data from flags
		email, _ := cmd.Flags().GetString("email")
		firstName, _ := cmd.Flags().GetString("first-name")
		lastName, _ := cmd.Flags().GetString("last-name")
		portalRole, _ := cmd.Flags().GetString("portal-role")

		if email == "" {
			shared.LogError("Error: email is required")
			return
		}
		if firstName == "" {
			shared.LogError("Error: first-name is required")
			return
		}
		if lastName == "" {
			shared.LogError("Error: last-name is required")
			return
		}

		// Create user request body
		userBody := map[string]interface{}{
			"email":      email,
			"firstName":  firstName,
			"lastName":   lastName,
			"portalRole": portalRole,
		}

		clientVersion := shared.GetVersionedApiClient()
		if clientVersion == nil {
			shared.LogError("Error: failed to initialize API client")
			return
		}

		// Type switch to handle different client versions
		switch client := clientVersion.(type) {
		case *v2_2.Client:
			if client.PentesterOps == nil {
				shared.LogError("Error: PentesterOps is nil for v2.2 client")
				return
			}

			_, err := client.PentesterOps.ApiV22PentesterUsersPost(userBody)
			if err != nil {
				shared.LogError("Error: failed to create user", "error", err)
				return
			}

			fmt.Printf("Successfully created user\n")

		default:
			shared.LogError("Error: unsupported client type: %T", clientVersion)
			return
		}
	},
}

// Get user by ID command
var getUserCmd = &cobra.Command{
	Use:   "get [user-id]",
	Short: "Get user by ID (pentester view)",
	Long:  `Retrieve detailed information about a specific user using pentester operations.`,
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		userID := args[0]

		clientVersion := shared.GetVersionedApiClient()
		if clientVersion == nil {
			shared.LogError("Error: failed to initialize API client")
			return
		}

		// Type switch to handle different client versions
		switch client := clientVersion.(type) {
		case *v2_2.Client:
			if client.PentesterOps == nil {
				shared.LogError("Error: PentesterOps is nil for v2.2 client")
				return
			}

			response, err := client.PentesterOps.ApiV22PentesterUsersByIdGet(userID)
			if err != nil {
				shared.LogError("Error: failed to get user", "error", err)
				return
			}

			// Get the output format option
			outputFormat, _ := cmd.Flags().GetString("output")

			// Validate output format
			validFormats := []string{"json", "table", "custom"}
			isValidFormat := false
			for _, format := range validFormats {
				if outputFormat == format {
					isValidFormat = true
					break
				}
			}

			if !isValidFormat {
				shared.LogError("Error: Invalid output format '%s'. Valid options are: %s",
					outputFormat, strings.Join(validFormats, ", "))
				return
			}

			if err != nil {
				shared.LogError("Error: failed to get user", "error", err)
				return
			}

			// Use the output format-specific function
			switch outputFormat {
			case "json":
				if err := shared.PrintJSONResponse(response); err != nil {
					shared.LogError("Error printing full JSON response", "error", err)
				}
			case "table":
				if err := shared.PrintPentestersTable(response); err != nil {
					shared.LogError("Error printing table response", "error", err)
				}
			case "custom":
				maxColumns, _ := cmd.Flags().GetInt("max-columns")
				if maxColumns <= 0 {
					maxColumns = 4 // Default to 4 columns
				}
				if err := shared.PrintCustomTable(response, maxColumns); err != nil {
					shared.LogError("Error printing custom table response", "error", err)
				}
			}

		default:
			shared.LogError("Error: unsupported client type: %T", clientVersion)
			return
		}
	},
}

// Update user command
var updateUserCmd = &cobra.Command{
	Use:   "update [user-id]",
	Short: "Update a user (pentester view)",
	Long:  `Update an existing user using pentester operations.`,
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		userID := args[0]

		// Get update data from flags
		email, _ := cmd.Flags().GetString("email")
		firstName, _ := cmd.Flags().GetString("first-name")
		lastName, _ := cmd.Flags().GetString("last-name")
		portalRole, _ := cmd.Flags().GetString("portal-role")

		// Create update request body
		updateBody := map[string]interface{}{}
		if email != "" {
			updateBody["email"] = email
		}
		if firstName != "" {
			updateBody["firstName"] = firstName
		}
		if lastName != "" {
			updateBody["lastName"] = lastName
		}
		if portalRole != "" {
			updateBody["portalRole"] = portalRole
		}

		clientVersion := shared.GetVersionedApiClient()
		if clientVersion == nil {
			shared.LogError("Error: failed to initialize API client")
			return
		}

		// Type switch to handle different client versions
		switch client := clientVersion.(type) {
		case *v2_2.Client:
			if client.PentesterOps == nil {
				shared.LogError("Error: PentesterOps is nil for v2.2 client")
				return
			}

			_, err := client.PentesterOps.ApiV22PentesterUsersByIdPut(userID, updateBody)
			if err != nil {
				shared.LogError("Error: failed to update user", "error", err)
				return
			}

			fmt.Printf("Successfully updated user %s\n", userID)

		default:
			shared.LogError("Error: unsupported client type: %T", clientVersion)
			return
		}
	},
}

// Delete user command
var deleteUserCmd = &cobra.Command{
	Use:   "delete [user-id]",
	Short: "Delete a user (pentester view)",
	Long:  `Delete a user by its ID using pentester operations.`,
	Args:  cobra.ExactArgs(1),
	Run: func(cmd *cobra.Command, args []string) {
		userID := args[0]

		clientVersion := shared.GetVersionedApiClient()
		if clientVersion == nil {
			shared.LogError("Error: failed to initialize API client")
			return
		}

		// Type switch to handle different client versions
		switch client := clientVersion.(type) {
		case *v2_2.Client:
			if client.PentesterOps == nil {
				shared.LogError("Error: PentesterOps is nil for v2.2 client")
				return
			}

			_, err := client.PentesterOps.ApiV22PentesterUsersByIdDelete(userID)
			if err != nil {
				shared.LogError("Error: failed to delete user", "error", err)
				return
			}

			fmt.Printf("Successfully deleted user %s\n", userID)

		default:
			shared.LogError("Error: unsupported client type: %T", clientVersion)
			return
		}
	},
}

// Initialize function to register all users commands
func init() {
	// Add flags to list users command
	listUsersCmd.Flags().StringP("output", "o", "table", "Output format (json, table, custom)")
	listUsersCmd.Flags().Int("max-columns", 4, "Maximum number of columns for custom table output")
	listUsersCmd.Flags().String("client-id", "", "Filter by client ID")
	listUsersCmd.Flags().String("portal-role", "", "Filter by portal role")
	listUsersCmd.Flags().Int("max-results", 10, "Maximum number of results to return")
	listUsersCmd.Flags().Int("skip-count", 0, "Number of results to skip")
	listUsersCmd.Flags().String("filter", "", "Filter string for searching")

	// Add flags to create user command
	createPentesterUserCmd.Flags().String("email", "", "User email (required)")
	createPentesterUserCmd.Flags().String("first-name", "", "User first name (required)")
	createPentesterUserCmd.Flags().String("last-name", "", "User last name (required)")
	createPentesterUserCmd.Flags().String("portal-role", "", "User portal role")

	// Add flags to get user command
	getUserCmd.Flags().StringP("output", "o", "table", "Output format (json, table, custom)")
	getUserCmd.Flags().Int("max-columns", 4, "Maximum number of columns for custom table output")

	// Add flags to update user command
	updateUserCmd.Flags().String("email", "", "User email")
	updateUserCmd.Flags().String("first-name", "", "User first name")
	updateUserCmd.Flags().String("last-name", "", "User last name")
	updateUserCmd.Flags().String("portal-role", "", "User portal role")

	// Add all commands to the users command group
	usersCmd.AddCommand(listUsersCmd)
	usersCmd.AddCommand(createPentesterUserCmd)
	usersCmd.AddCommand(getUserCmd)
	usersCmd.AddCommand(updateUserCmd)
	usersCmd.AddCommand(deleteUserCmd)

	// Commands will be added to pentester command group via InitPentesterCommands
}
