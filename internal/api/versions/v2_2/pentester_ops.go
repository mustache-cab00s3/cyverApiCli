package v2_2

import (
	"fmt"
	"net/http"
	"net/url"
)

// PentesterOps implements the PentesterInterface for V2.2
type PentesterOps struct {
	*Client
}

// Get a paginated list of Projects based on a filter
func (c *PentesterOps) ApiV22PentesterProjectsGet(ClientId string, Status string, LabelIdList string, MaxResultCount int, SkipCount int, Filter string) (*ProjectDtoV2PagedResultDtoAjaxResponse, error) {
	getLogger().Debug("Starting ApiV22PentesterProjectsGet request", "ClientId", ClientId, "Status", Status, "LabelIdList", LabelIdList, "MaxResultCount", MaxResultCount, "SkipCount", SkipCount, "Filter", Filter)

	// Build query parameters
	q := url.Values{}
	if ClientId != "" {
		q.Set("ClientId", ClientId)
	}
	if Status != "" {
		q.Set("Status", Status)
	}
	if LabelIdList != "" {
		q.Set("LabelIdList", LabelIdList)
	}
	q.Set("MaxResultCount", fmt.Sprint(MaxResultCount))
	q.Set("SkipCount", fmt.Sprint(SkipCount))
	if Filter != "" {
		q.Set("Filter", Filter)
	}

	var response ProjectDtoV2PagedResultDtoAjaxResponse
	path := fmt.Sprintf("/api/v2.2/pentester/projects?%s", q.Encode())

	getLogger().Info("Making API request", "method", http.MethodGet, "path", path, "queryParams", q.Encode())
	_, err := c.DoRequest(http.MethodGet, path, q, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterProjectsGet", "ClientId", ClientId, "Status", Status, "error", err)
		return nil, err
	}

	getLogger().Debug("Successfully completed ApiV22PentesterProjectsGet", "ClientId", ClientId, "Status", Status)
	return &response, nil
}

// Create a new Project
func (c *PentesterOps) ApiV22PentesterProjectsPost(triggerEvents bool, body interface{}) (*interface{}, error) {
	getLogger().Debug("Starting ApiV22PentesterProjectsPost request", "triggerEvents", triggerEvents)

	var response interface{}
	path := "/api/v2.2/pentester/projects"

	getLogger().Info("Making API request", "method", http.MethodPost, "path", path)
	_, err := c.DoRequest(http.MethodPost, path, nil, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterProjectsPost", "triggerEvents", triggerEvents, "error", err)
		return nil, err
	}

	getLogger().Debug("Successfully completed ApiV22PentesterProjectsPost", "triggerEvents", triggerEvents)
	return &response, nil
}

// Get a Project by ID
func (c *PentesterOps) ApiV22PentesterProjectsByIdGet(id string) (*ProjectDtoV2AjaxResponse, error) {
	getLogger().Debug("Starting ApiV22PentesterProjectsByIdGet request", "projectID", id)

	var response ProjectDtoV2AjaxResponse
	path := fmt.Sprintf("/api/v2.2/pentester/projects/%s", id)

	getLogger().Info("Making API request", "method", http.MethodGet, "path", path)
	rawResponse, err := c.DoRequest(http.MethodGet, path, nil, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterProjectsByIdGet", "projectID", id, "error", err)
		return nil, err
	}

	// Store the raw JSON response in the response struct for output handling
	if rawResponse != nil {
		if rawBytes, ok := rawResponse.([]byte); ok {
			response.RawJSON = rawBytes
		}
	}

	getLogger().Debug("Successfully completed ApiV22PentesterProjectsByIdGet", "projectID", id)
	return &response, nil
}

// Deletes a Project by ID
func (c *PentesterOps) ApiV22PentesterProjectsByIdDelete(id string) (*interface{}, error) {
	getLogger().Debug("Starting ApiV22PentesterProjectsByIdDelete request", "projectID", id)

	var response interface{}
	path := fmt.Sprintf("/api/v2.2/pentester/projects/%s", id)

	getLogger().Info("Making API request", "method", http.MethodDelete, "path", path)
	_, err := c.DoRequest(http.MethodDelete, path, nil, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterProjectsByIdDelete", "projectID", id, "error", err)
		return nil, err
	}

	getLogger().Debug("Successfully completed ApiV22PentesterProjectsByIdDelete", "projectID", id)
	return &response, nil
}

// Update the status of a Project
func (c *PentesterOps) ApiV22PentesterProjectsByIdStatusPut(id string, triggerEvents bool, body interface{}) (*interface{}, error) {
	getLogger().Debug("Starting ApiV22PentesterProjectsByIdStatusPut request", "projectID", id, "triggerEvents", triggerEvents)

	var response interface{}
	path := fmt.Sprintf("/api/v2.2/pentester/projects/%s/status", id)

	getLogger().Info("Making API request", "method", http.MethodPut, "path", path)
	_, err := c.DoRequest(http.MethodPut, path, nil, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterProjectsByIdStatusPut", "projectID", id, "triggerEvents", triggerEvents, "error", err)
		return nil, err
	}

	getLogger().Debug("Successfully completed ApiV22PentesterProjectsByIdStatusPut", "projectID", id, "triggerEvents", triggerEvents)
	return &response, nil
}

// Set the assets of a Project
func (c *PentesterOps) ApiV22PentesterProjectsByIdAssetsPut(id string, body interface{}) (*interface{}, error) {
	getLogger().Debug("Starting ApiV22PentesterProjectsByIdAssetsPut request", "projectID", id)

	var response interface{}
	path := fmt.Sprintf("/api/v2.2/pentester/projects/%s/assets", id)

	getLogger().Info("Making API request", "method", http.MethodPut, "path", path)
	_, err := c.DoRequest(http.MethodPut, path, nil, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterProjectsByIdAssetsPut", "projectID", id, "error", err)
		return nil, err
	}

	getLogger().Debug("Successfully completed ApiV22PentesterProjectsByIdAssetsPut", "projectID", id)
	return &response, nil
}

// Set the users of a Project
func (c *PentesterOps) ApiV22PentesterProjectsByIdUsersPut(id string, triggerEvents bool, body interface{}) (*interface{}, error) {
	getLogger().Debug("Starting ApiV22PentesterProjectsByIdUsersPut request")

	var response interface{}
	path := fmt.Sprintf("/api/v2.2/pentester/projects/%s/users", id)

	getLogger().Info("Making API request", "method", http.MethodPut, "path", path)
	_, err := c.DoRequest(http.MethodPut, path, nil, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterProjectsByIdUsersPut", "error", err)
		return nil, err
	}

	getLogger().Debug("Successfully completed ApiV22PentesterProjectsByIdUsersPut")
	return &response, nil
}

// Set the teams of a Project
func (c *PentesterOps) ApiV22PentesterProjectsByIdTeamsPut(id string, body interface{}) (*interface{}, error) {
	getLogger().Debug("Starting ApiV22PentesterProjectsByIdTeamsPut request")

	var response interface{}
	path := fmt.Sprintf("/api/v2.2/pentester/projects/%s/teams", id)

	getLogger().Info("Making API request", "method", http.MethodPut, "path", path)
	_, err := c.DoRequest(http.MethodPut, path, nil, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterProjectsByIdTeamsPut", "error", err)
		return nil, err
	}

	getLogger().Debug("Successfully completed ApiV22PentesterProjectsByIdTeamsPut")
	return &response, nil
}

// Get a paginated list of the Project Checklists
func (c *PentesterOps) ApiV22PentesterProjectsByIdChecklistsGet(id string) (*ProjectChecklistDtoListResultDtoAjaxResponse, error) {
	getLogger().Debug("Starting ApiV22PentesterProjectsByIdChecklistsGet request")

	var response ProjectChecklistDtoListResultDtoAjaxResponse
	path := fmt.Sprintf("/api/v2.2/pentester/projects/%s/checklists", id)

	getLogger().Info("Making API request", "method", http.MethodGet, "path", path)
	_, err := c.DoRequest(http.MethodGet, path, nil, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterProjectsByIdChecklistsGet", "error", err)
		return nil, err
	}

	getLogger().Debug("Successfully completed ApiV22PentesterProjectsByIdChecklistsGet")
	return &response, nil
}

// Get a paginated list of the Project Compliance norms
func (c *PentesterOps) ApiV22PentesterProjectsByIdComplianceNormsGet(id string) (*ProjectComplianceNormDtoListResultDtoAjaxResponse, error) {
	getLogger().Debug("Starting ApiV22PentesterProjectsByIdComplianceNormsGet request")

	var response ProjectComplianceNormDtoListResultDtoAjaxResponse
	path := fmt.Sprintf("/api/v2.2/pentester/projects/%s/compliance-norms", id)

	getLogger().Info("Making API request", "method", http.MethodGet, "path", path)
	_, err := c.DoRequest(http.MethodGet, path, nil, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterProjectsByIdComplianceNormsGet", "error", err)
		return nil, err
	}

	getLogger().Debug("Successfully completed ApiV22PentesterProjectsByIdComplianceNormsGet")
	return &response, nil
}

// Get a list of the Project Report versions
func (c *PentesterOps) ApiV22PentesterProjectsByIdReportsVersionsGet(id string) (*ReportVersionDtoListResultDtoAjaxResponse, error) {
	getLogger().Debug("Starting ApiV22PentesterProjectsByIdReportsVersionsGet request")

	var response ReportVersionDtoListResultDtoAjaxResponse
	path := fmt.Sprintf("/api/v2.2/pentester/projects/%s/reports/versions", id)

	getLogger().Info("Making API request", "method", http.MethodGet, "path", path)
	_, err := c.DoRequest(http.MethodGet, path, nil, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterProjectsByIdReportsVersionsGet", "error", err)
		return nil, err
	}

	getLogger().Debug("Successfully completed ApiV22PentesterProjectsByIdReportsVersionsGet")
	return &response, nil
}

// Get the Report content. If no version Id is supplied, default to the latest published version.
func (c *PentesterOps) ApiV22PentesterProjectsByIdReportsByReportversionGet(id string, reportVersion string) (*ReportDtoAjaxResponse, error) {
	getLogger().Debug("Starting ApiV22PentesterProjectsByIdReportsByReportversionGet request")

	var response ReportDtoAjaxResponse
	path := fmt.Sprintf("/api/v2.2/pentester/projects/%s/reports/%s", id, reportVersion)

	getLogger().Info("Making API request", "method", http.MethodGet, "path", path)
	_, err := c.DoRequest(http.MethodGet, path, nil, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterProjectsByIdReportsByReportversionGet", "error", err)
		return nil, err
	}

	getLogger().Debug("Successfully completed ApiV22PentesterProjectsByIdReportsByReportversionGet")
	return &response, nil
}

// Uploads a file to the Project
func (c *PentesterOps) ApiV22PentesterProjectsByIdUploadFilePost(id string, body interface{}) (*interface{}, error) {
	getLogger().Debug("Starting ApiV22PentesterProjectsByIdUploadFilePost request")

	var response interface{}
	path := fmt.Sprintf("/api/v2.2/pentester/projects/%s/upload-file", id)

	getLogger().Info("Making API request", "method", http.MethodPost, "path", path)
	_, err := c.DoRequest(http.MethodPost, path, nil, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterProjectsByIdUploadFilePost", "error", err)
		return nil, err
	}

	getLogger().Debug("Successfully completed ApiV22PentesterProjectsByIdUploadFilePost")
	return &response, nil
}

// Get a paginated list of Continuous Projects based on a filter
func (c *PentesterOps) ApiV22PentesterContinuousProjectsGet(ClientId string, Status string, LabelIdList string, MaxResultCount int, SkipCount int, Filter string) (*ContinuousProjectDtoPagedResultDtoAjaxResponse, error) {
	getLogger().Debug("Starting ApiV22PentesterContinuousProjectsGet request", "ClientId", ClientId, "Status", Status, "LabelIdList", LabelIdList, "MaxResultCount", MaxResultCount, "SkipCount", SkipCount, "Filter", Filter)

	// Build query parameters
	q := url.Values{}
	if ClientId != "" {
		q.Set("ClientId", ClientId)
	}
	if Status != "" {
		q.Set("Status", Status)
	}
	if LabelIdList != "" {
		q.Set("LabelIdList", LabelIdList)
	}
	q.Set("MaxResultCount", fmt.Sprint(MaxResultCount))
	q.Set("SkipCount", fmt.Sprint(SkipCount))
	if Filter != "" {
		q.Set("Filter", Filter)
	}

	var response ContinuousProjectDtoPagedResultDtoAjaxResponse
	path := fmt.Sprintf("/api/v2.2/pentester/continuous-projects?%s", q.Encode())

	getLogger().Info("Making API request", "method", http.MethodGet, "path", path, "queryParams", q.Encode())
	_, err := c.DoRequest(http.MethodGet, path, q, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterContinuousProjectsGet", "error", err)
		return nil, err
	}

	getLogger().Debug("Successfully completed ApiV22PentesterContinuousProjectsGet")
	return &response, nil
}

// Create a new Continuous Project
func (c *PentesterOps) ApiV22PentesterContinuousProjectsPost(triggerEvents bool, body interface{}) (*interface{}, error) {
	getLogger().Debug("Starting ApiV22PentesterContinuousProjectsPost request")

	var response interface{}
	path := "/api/v2.2/pentester/continuous-projects"

	getLogger().Info("Making API request", "method", http.MethodPost, "path", path)
	_, err := c.DoRequest(http.MethodPost, path, nil, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterContinuousProjectsPost", "error", err)
		return nil, err
	}

	getLogger().Debug("Successfully completed ApiV22PentesterContinuousProjectsPost")
	return &response, nil
}

// Get a Project by ID
func (c *PentesterOps) ApiV22PentesterContinuousProjectsByIdGet(id string) (*ContinuousProjectDtoAjaxResponse, error) {
	getLogger().Debug("Starting ApiV22PentesterContinuousProjectsByIdGet request")

	var response ContinuousProjectDtoAjaxResponse
	path := fmt.Sprintf("/api/v2.2/pentester/continuous-projects/%s", id)

	getLogger().Info("Making API request", "method", http.MethodGet, "path", path)
	_, err := c.DoRequest(http.MethodGet, path, nil, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterContinuousProjectsByIdGet", "error", err)
		return nil, err
	}

	getLogger().Debug("Successfully completed ApiV22PentesterContinuousProjectsByIdGet")
	return &response, nil
}

// Deletes a Project by ID
func (c *PentesterOps) ApiV22PentesterContinuousProjectsByIdDelete(id string) (*interface{}, error) {
	getLogger().Debug("Starting ApiV22PentesterContinuousProjectsByIdDelete request")

	var response interface{}
	path := fmt.Sprintf("/api/v2.2/pentester/continuous-projects/%s", id)

	getLogger().Info("Making API request", "method", http.MethodDelete, "path", path)
	_, err := c.DoRequest(http.MethodDelete, path, nil, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterContinuousProjectsByIdDelete", "error", err)
		return nil, err
	}

	getLogger().Debug("Successfully completed ApiV22PentesterContinuousProjectsByIdDelete")
	return &response, nil
}

// Update the status of a Continuous Project
func (c *PentesterOps) ApiV22PentesterContinuousProjectsByIdStatusPut(id string, triggerEvents bool, body interface{}) (*interface{}, error) {
	getLogger().Debug("Starting ApiV22PentesterContinuousProjectsByIdStatusPut request")

	var response interface{}
	path := fmt.Sprintf("/api/v2.2/pentester/continuous-projects/%s/status", id)

	getLogger().Info("Making API request", "method", http.MethodPut, "path", path)
	_, err := c.DoRequest(http.MethodPut, path, nil, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterContinuousProjectsByIdStatusPut", "error", err)
		return nil, err
	}

	getLogger().Debug("Successfully completed ApiV22PentesterContinuousProjectsByIdStatusPut")
	return &response, nil
}

// Set the assets of a Continuous Project
func (c *PentesterOps) ApiV22PentesterContinuousProjectsByIdAssetsPut(id string, body interface{}) (*interface{}, error) {
	getLogger().Debug("Starting ApiV22PentesterContinuousProjectsByIdAssetsPut request")

	var response interface{}
	path := fmt.Sprintf("/api/v2.2/pentester/continuous-projects/%s/assets", id)

	getLogger().Info("Making API request", "method", http.MethodPut, "path", path)
	_, err := c.DoRequest(http.MethodPut, path, nil, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterContinuousProjectsByIdAssetsPut", "error", err)
		return nil, err
	}

	getLogger().Debug("Successfully completed ApiV22PentesterContinuousProjectsByIdAssetsPut")
	return &response, nil
}

// Set the users of a Continuous Project
func (c *PentesterOps) ApiV22PentesterContinuousProjectsByIdUsersPut(id string, triggerEvents bool, body interface{}) (*interface{}, error) {
	getLogger().Debug("Starting ApiV22PentesterContinuousProjectsByIdUsersPut request")

	var response interface{}
	path := fmt.Sprintf("/api/v2.2/pentester/continuous-projects/%s/users", id)

	getLogger().Info("Making API request", "method", http.MethodPut, "path", path)
	_, err := c.DoRequest(http.MethodPut, path, nil, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterContinuousProjectsByIdUsersPut", "error", err)
		return nil, err
	}

	getLogger().Debug("Successfully completed ApiV22PentesterContinuousProjectsByIdUsersPut")
	return &response, nil
}

// Set the teams of a Continuous Project
func (c *PentesterOps) ApiV22PentesterContinuousProjectsByIdTeamsPut(id string, body interface{}) (*interface{}, error) {
	getLogger().Debug("Starting ApiV22PentesterContinuousProjectsByIdTeamsPut request")

	var response interface{}
	path := fmt.Sprintf("/api/v2.2/pentester/continuous-projects/%s/teams", id)

	getLogger().Info("Making API request", "method", http.MethodPut, "path", path)
	_, err := c.DoRequest(http.MethodPut, path, nil, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterContinuousProjectsByIdTeamsPut", "error", err)
		return nil, err
	}

	getLogger().Debug("Successfully completed ApiV22PentesterContinuousProjectsByIdTeamsPut")
	return &response, nil
}

// Get all runs of a Continuous Project
func (c *PentesterOps) ApiV22PentesterContinuousProjectsByIdRunsGet(id string) (*RunDtoListResultDtoAjaxResponse, error) {
	getLogger().Debug("Starting ApiV22PentesterContinuousProjectsByIdRunsGet request")

	var response RunDtoListResultDtoAjaxResponse
	path := fmt.Sprintf("/api/v2.2/pentester/continuous-projects/%s/runs", id)

	getLogger().Info("Making API request", "method", http.MethodGet, "path", path)
	_, err := c.DoRequest(http.MethodGet, path, nil, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterContinuousProjectsByIdRunsGet", "error", err)
		return nil, err
	}

	getLogger().Debug("Successfully completed ApiV22PentesterContinuousProjectsByIdRunsGet")
	return &response, nil
}

// Close the current run of a Continuous Project
func (c *PentesterOps) ApiV22PentesterContinuousProjectsByIdCompleteRunPost(id string, triggerEvents bool) (*interface{}, error) {
	getLogger().Debug("Starting ApiV22PentesterContinuousProjectsByIdCompleteRunPost request")

	var response interface{}
	path := fmt.Sprintf("/api/v2.2/pentester/continuous-projects/%s/complete-run", id)

	getLogger().Info("Making API request", "method", http.MethodPost, "path", path)
	_, err := c.DoRequest(http.MethodPost, path, nil, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterContinuousProjectsByIdCompleteRunPost", "error", err)
		return nil, err
	}

	getLogger().Debug("Successfully completed ApiV22PentesterContinuousProjectsByIdCompleteRunPost")
	return &response, nil
}

// Get a list of the Continuous Project Report versions
func (c *PentesterOps) ApiV22PentesterContinuousProjectsByIdReportsVersionsGet(id string) (*ReportVersionDtoListResultDtoAjaxResponse, error) {
	getLogger().Debug("Starting ApiV22PentesterContinuousProjectsByIdReportsVersionsGet request")

	var response ReportVersionDtoListResultDtoAjaxResponse
	path := fmt.Sprintf("/api/v2.2/pentester/continuous-projects/%s/reports/versions", id)

	getLogger().Info("Making API request", "method", http.MethodGet, "path", path)
	_, err := c.DoRequest(http.MethodGet, path, nil, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterContinuousProjectsByIdReportsVersionsGet", "error", err)
		return nil, err
	}

	getLogger().Debug("Successfully completed ApiV22PentesterContinuousProjectsByIdReportsVersionsGet")
	return &response, nil
}

// Get the report contents of the Continuous Project. Default Report version is the latest.
func (c *PentesterOps) ApiV22PentesterContinuousProjectsByIdReportsByReportversionGet(id string, reportVersion string) (*ReportDtoAjaxResponse, error) {
	getLogger().Debug("Starting ApiV22PentesterContinuousProjectsByIdReportsByReportversionGet request")

	var response ReportDtoAjaxResponse
	path := fmt.Sprintf("/api/v2.2/pentester/continuous-projects/%s/reports/%s", id, reportVersion)

	getLogger().Info("Making API request", "method", http.MethodGet, "path", path)
	_, err := c.DoRequest(http.MethodGet, path, nil, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterContinuousProjectsByIdReportsByReportversionGet", "error", err)
		return nil, err
	}

	getLogger().Debug("Successfully completed ApiV22PentesterContinuousProjectsByIdReportsByReportversionGet")
	return &response, nil
}

// Uploads a file to the Continuous Project
func (c *PentesterOps) ApiV22PentesterContinuousProjectsByIdUploadFilePost(id string, body interface{}) (*interface{}, error) {
	getLogger().Debug("Starting ApiV22PentesterContinuousProjectsByIdUploadFilePost request")

	var response interface{}
	path := fmt.Sprintf("/api/v2.2/pentester/continuous-projects/%s/upload-file", id)

	getLogger().Info("Making API request", "method", http.MethodPost, "path", path)
	_, err := c.DoRequest(http.MethodPost, path, nil, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterContinuousProjectsByIdUploadFilePost", "error", err)
		return nil, err
	}

	getLogger().Debug("Successfully completed ApiV22PentesterContinuousProjectsByIdUploadFilePost")
	return &response, nil
}

// Get a paginated list of Findings based on a filter
func (c *PentesterOps) ApiV22PentesterFindingsGet(ProjectId string, Type string, Status string, SeverityList string, VulnerabilityTypeList string, IdList string, AssetIdList string, MaxResultCount int, SkipCount int) (*FindingDtoPagedResultDtoAjaxResponse, error) {
	getLogger().Debug("Starting ApiV22PentesterFindingsGet request", "ProjectId", ProjectId, "Type", Type, "Status", Status, "SeverityList", SeverityList, "VulnerabilityTypeList", VulnerabilityTypeList, "IdList", IdList, "AssetIdList", AssetIdList, "MaxResultCount", MaxResultCount, "SkipCount", SkipCount)

	// Build query parameters
	q := url.Values{}
	if ProjectId != "" {
		q.Set("ProjectId", ProjectId)
	}
	if Type != "" {
		q.Set("Type", Type)
	}
	if Status != "" {
		q.Set("Status", Status)
	}
	if SeverityList != "" {
		q.Set("SeverityList", SeverityList)
	}
	if VulnerabilityTypeList != "" {
		q.Set("VulnerabilityTypeList", VulnerabilityTypeList)
	}
	if IdList != "" {
		q.Set("IdList", IdList)
	}
	if AssetIdList != "" {
		q.Set("AssetIdList", AssetIdList)
	}
	q.Set("MaxResultCount", fmt.Sprint(MaxResultCount))
	q.Set("SkipCount", fmt.Sprint(SkipCount))

	var response FindingDtoPagedResultDtoAjaxResponse
	path := fmt.Sprintf("/api/v2.2/pentester/findings?%s", q.Encode())

	getLogger().Info("Making API request", "method", http.MethodGet, "path", path, "queryParams", q.Encode())
	rawResponse, err := c.DoRequest(http.MethodGet, path, q, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterFindingsGet", "error", err)
		return nil, err
	}

	// Store the raw JSON response for full output
	if rawResponse != nil {
		response.RawJSON = rawResponse
	}

	getLogger().Debug("Successfully completed ApiV22PentesterFindingsGet")
	return &response, nil
}

// Create a new Finding
func (c *PentesterOps) ApiV22PentesterFindingsPost(projectId string, triggerEvents bool, body interface{}) (*interface{}, error) {
	getLogger().Debug("Starting ApiV22PentesterFindingsPost request")

	var response interface{}
	path := "/api/v2.2/pentester/findings"

	getLogger().Info("Making API request", "method", http.MethodPost, "path", path)
	_, err := c.DoRequest(http.MethodPost, path, nil, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterFindingsPost", "error", err)
		return nil, err
	}

	getLogger().Debug("Successfully completed ApiV22PentesterFindingsPost")
	return &response, nil
}

// Get a Finding by ID
func (c *PentesterOps) ApiV22PentesterFindingsByIdGet(id string, includeEvidence bool) (*FindingDtoAjaxResponse, error) {
	getLogger().Debug("Starting ApiV22PentesterFindingsByIdGet request", "findingID", id, "includeEvidence", includeEvidence)

	var response FindingDtoAjaxResponse
	path := fmt.Sprintf("/api/v2.2/pentester/findings/%s", id)

	getLogger().Info("Making API request", "method", http.MethodGet, "path", path)
	_, err := c.DoRequest(http.MethodGet, path, nil, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterFindingsByIdGet", "findingID", id, "includeEvidence", includeEvidence, "error", err)
		return nil, err
	}

	getLogger().Debug("Successfully completed ApiV22PentesterFindingsByIdGet", "findingID", id, "includeEvidence", includeEvidence)
	return &response, nil
}

// Update an existing Finding
func (c *PentesterOps) ApiV22PentesterFindingsByIdPut(id string, triggerEvents bool, body interface{}) (*interface{}, error) {
	getLogger().Debug("Starting ApiV22PentesterFindingsByIdPut request")

	var response interface{}
	path := fmt.Sprintf("/api/v2.2/pentester/findings/%s", id)

	getLogger().Info("Making API request", "method", http.MethodPut, "path", path)
	_, err := c.DoRequest(http.MethodPut, path, nil, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterFindingsByIdPut", "error", err)
		return nil, err
	}

	getLogger().Debug("Successfully completed ApiV22PentesterFindingsByIdPut")
	return &response, nil
}

// Deletes a Finding by ID
func (c *PentesterOps) ApiV22PentesterFindingsByIdDelete(id string) (*interface{}, error) {
	getLogger().Debug("Starting ApiV22PentesterFindingsByIdDelete request")

	var response interface{}
	path := fmt.Sprintf("/api/v2.2/pentester/findings/%s", id)

	getLogger().Info("Making API request", "method", http.MethodDelete, "path", path)
	_, err := c.DoRequest(http.MethodDelete, path, nil, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterFindingsByIdDelete", "error", err)
		return nil, err
	}

	getLogger().Debug("Successfully completed ApiV22PentesterFindingsByIdDelete")
	return &response, nil
}

// Import Findings from a file
func (c *PentesterOps) ApiV22PentesterFindingsImportPost(body interface{}) (*Int32AjaxResponse, error) {
	getLogger().Debug("Starting ApiV22PentesterFindingsImportPost request")

	var response Int32AjaxResponse
	path := "/api/v2.2/pentester/findings/import"

	getLogger().Info("Making API request", "method", http.MethodPost, "path", path)
	_, err := c.DoRequest(http.MethodPost, path, nil, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterFindingsImportPost", "error", err)
		return nil, err
	}

	getLogger().Debug("Successfully completed ApiV22PentesterFindingsImportPost")
	return &response, nil
}

// Get a paginated list of Clients based on a filter
func (c *PentesterOps) ApiV22PentesterClientsGet(Status string, LabelIdList string, MaxResultCount int, SkipCount int, Filter string) (*ClientDtoPagedResultDtoAjaxResponse, error) {
	getLogger().Debug("Starting ApiV22PentesterClientsGet request", "Status", Status, "LabelIdList", LabelIdList, "MaxResultCount", MaxResultCount, "SkipCount", SkipCount, "Filter", Filter)

	// Build query parameters
	q := url.Values{}
	if Status != "" {
		q.Set("Status", Status)
	}
	if LabelIdList != "" {
		q.Set("LabelIdList", LabelIdList)
	}
	q.Set("MaxResultCount", fmt.Sprint(MaxResultCount))
	q.Set("SkipCount", fmt.Sprint(SkipCount))
	if Filter != "" {
		q.Set("Filter", Filter)
	}

	var response ClientDtoPagedResultDtoAjaxResponse
	path := fmt.Sprintf("/api/v2.2/pentester/clients?%s", q.Encode())

	getLogger().Info("Making API request", "method", http.MethodGet, "path", path, "queryParams", q.Encode())
	_, err := c.DoRequest(http.MethodGet, path, q, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterClientsGet", "error", err)
		return nil, err
	}

	getLogger().Debug("Successfully completed ApiV22PentesterClientsGet")
	return &response, nil
}

// Create a new Client
func (c *PentesterOps) ApiV22PentesterClientsPost(body interface{}) (*interface{}, error) {
	getLogger().Debug("Starting ApiV22PentesterClientsPost request")

	var response interface{}
	path := "/api/v2.2/pentester/clients"

	getLogger().Info("Making API request", "method", http.MethodPost, "path", path)
	_, err := c.DoRequest(http.MethodPost, path, nil, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterClientsPost", "error", err)
		return nil, err
	}

	getLogger().Debug("Successfully completed ApiV22PentesterClientsPost")
	return &response, nil
}

// Get a Client by ID
func (c *PentesterOps) ApiV22PentesterClientsByIdGet(id string) (*ClientDtoAjaxResponse, error) {
	getLogger().Debug("Starting ApiV22PentesterClientsByIdGet request")

	var response ClientDtoAjaxResponse
	path := fmt.Sprintf("/api/v2.2/pentester/clients/%s", id)

	getLogger().Info("Making API request", "method", http.MethodGet, "path", path)
	_, err := c.DoRequest(http.MethodGet, path, nil, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterClientsByIdGet", "error", err)
		return nil, err
	}

	getLogger().Debug("Successfully completed ApiV22PentesterClientsByIdGet")
	return &response, nil
}

// Update an existing Client
func (c *PentesterOps) ApiV22PentesterClientsByIdPut(id string, body interface{}) (*interface{}, error) {
	getLogger().Debug("Starting ApiV22PentesterClientsByIdPut request")

	var response interface{}
	path := fmt.Sprintf("/api/v2.2/pentester/clients/%s", id)

	getLogger().Info("Making API request", "method", http.MethodPut, "path", path)
	_, err := c.DoRequest(http.MethodPut, path, nil, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterClientsByIdPut", "error", err)
		return nil, err
	}

	getLogger().Debug("Successfully completed ApiV22PentesterClientsByIdPut")
	return &response, nil
}

// Deletes a Client by ID
func (c *PentesterOps) ApiV22PentesterClientsByIdDelete(id string) (*interface{}, error) {
	getLogger().Debug("Starting ApiV22PentesterClientsByIdDelete request")

	var response interface{}
	path := fmt.Sprintf("/api/v2.2/pentester/clients/%s", id)

	getLogger().Info("Making API request", "method", http.MethodDelete, "path", path)
	_, err := c.DoRequest(http.MethodDelete, path, nil, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterClientsByIdDelete", "error", err)
		return nil, err
	}

	getLogger().Debug("Successfully completed ApiV22PentesterClientsByIdDelete")
	return &response, nil
}

// Get a paginated list of Assets based on a filter
func (c *PentesterOps) ApiV22PentesterClientsByIdAssetsGet(id string, TypeList string, MaxResultCount int, SkipCount int, Filter string) (*AssetDtoPagedResultDtoAjaxResponse, error) {
	getLogger().Debug("Starting ApiV22PentesterClientsByIdAssetsGet request", "id", id, "TypeList", TypeList, "MaxResultCount", MaxResultCount, "SkipCount", SkipCount, "Filter", Filter)

	// Build query parameters
	q := url.Values{}
	if TypeList != "" {
		q.Set("TypeList", TypeList)
	}
	q.Set("MaxResultCount", fmt.Sprint(MaxResultCount))
	q.Set("SkipCount", fmt.Sprint(SkipCount))
	if Filter != "" {
		q.Set("Filter", Filter)
	}

	var response AssetDtoPagedResultDtoAjaxResponse
	path := fmt.Sprintf("/api/v2.2/pentester/clients/%s/assets?%s", id, q.Encode())

	getLogger().Info("Making API request", "method", http.MethodGet, "path", path, "queryParams", q.Encode())
	_, err := c.DoRequest(http.MethodGet, path, q, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterClientsByIdAssetsGet", "error", err)
		return nil, err
	}

	getLogger().Debug("Successfully completed ApiV22PentesterClientsByIdAssetsGet")
	return &response, nil
}

// Create a new Client Asset
func (c *PentesterOps) ApiV22PentesterClientsByIdAssetsPost(id string, body interface{}) (*GuidAjaxResponse, error) {
	getLogger().Debug("Starting ApiV22PentesterClientsByIdAssetsPost request")

	var response GuidAjaxResponse
	path := fmt.Sprintf("/api/v2.2/pentester/clients/%s/assets", id)

	getLogger().Info("Making API request", "method", http.MethodPost, "path", path)
	_, err := c.DoRequest(http.MethodPost, path, nil, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterClientsByIdAssetsPost", "error", err)
		return nil, err
	}

	getLogger().Debug("Successfully completed ApiV22PentesterClientsByIdAssetsPost")
	return &response, nil
}

// Update a Client Asset
func (c *PentesterOps) ApiV22PentesterClientsByIdAssetsByAssetidPut(id string, assetId string, body interface{}) (*interface{}, error) {
	getLogger().Debug("Starting ApiV22PentesterClientsByIdAssetsByAssetidPut request")

	var response interface{}
	path := fmt.Sprintf("/api/v2.2/pentester/clients/%s/assets/%s", id, assetId)

	getLogger().Info("Making API request", "method", http.MethodPut, "path", path)
	_, err := c.DoRequest(http.MethodPut, path, nil, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterClientsByIdAssetsByAssetidPut", "error", err)
		return nil, err
	}

	getLogger().Debug("Successfully completed ApiV22PentesterClientsByIdAssetsByAssetidPut")
	return &response, nil
}

// Get a paginated list of Project Templates
func (c *PentesterOps) ApiV22PentesterProjectTemplatesGet(Type string, MaxResultCount int, SkipCount int) (*ProjectTemplateDtoPagedResultDtoAjaxResponse, error) {
	getLogger().Debug("Starting ApiV22PentesterProjectTemplatesGet request")

	var response ProjectTemplateDtoPagedResultDtoAjaxResponse
	path := "/api/v2.2/pentester/project-templates"

	getLogger().Info("Making API request", "method", http.MethodGet, "path", path)
	_, err := c.DoRequest(http.MethodGet, path, nil, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterProjectTemplatesGet", "error", err)
		return nil, err
	}

	getLogger().Debug("Successfully completed ApiV22PentesterProjectTemplatesGet")
	return &response, nil
}

// Get a paginated list of Report Templates
func (c *PentesterOps) ApiV22PentesterReportTemplatesGet(MaxResultCount int, SkipCount int) (*ReportTemplateDtoPagedResultDtoAjaxResponse, error) {
	getLogger().Debug("Starting ApiV22PentesterReportTemplatesGet request")

	var response ReportTemplateDtoPagedResultDtoAjaxResponse
	path := "/api/v2.2/pentester/report-templates"

	getLogger().Info("Making API request", "method", http.MethodGet, "path", path)
	_, err := c.DoRequest(http.MethodGet, path, nil, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterReportTemplatesGet", "error", err)
		return nil, err
	}

	getLogger().Debug("Successfully completed ApiV22PentesterReportTemplatesGet")
	return &response, nil
}

// Get a paginated list of Checklist Templates
func (c *PentesterOps) ApiV22PentesterChecklistTemplatesGet(MaxResultCount int, SkipCount int) (*ChecklistTemplateDtoPagedResultDtoAjaxResponse, error) {
	getLogger().Debug("Starting ApiV22PentesterChecklistTemplatesGet request")

	var response ChecklistTemplateDtoPagedResultDtoAjaxResponse
	path := "/api/v2.2/pentester/checklist-templates"

	getLogger().Info("Making API request", "method", http.MethodGet, "path", path)
	_, err := c.DoRequest(http.MethodGet, path, nil, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterChecklistTemplatesGet", "error", err)
		return nil, err
	}

	getLogger().Debug("Successfully completed ApiV22PentesterChecklistTemplatesGet")
	return &response, nil
}

// Get a paginated list of Compliance norm Templates
func (c *PentesterOps) ApiV22PentesterComplianceNormTemplatesGet(MaxResultCount int, SkipCount int) (*ComplianceNormTemplateDtoPagedResultDtoAjaxResponse, error) {
	getLogger().Debug("Starting ApiV22PentesterComplianceNormTemplatesGet request")

	var response ComplianceNormTemplateDtoPagedResultDtoAjaxResponse
	path := "/api/v2.2/pentester/compliance-norm-templates"

	getLogger().Info("Making API request", "method", http.MethodGet, "path", path)
	_, err := c.DoRequest(http.MethodGet, path, nil, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterComplianceNormTemplatesGet", "error", err)
		return nil, err
	}

	getLogger().Debug("Successfully completed ApiV22PentesterComplianceNormTemplatesGet")
	return &response, nil
}

// Get a paginated list of Labels based on a filter
func (c *PentesterOps) ApiV22PentesterLabelsGet(Type string, MaxResultCount int, SkipCount int, Filter string) (*LabelDtoPagedResultDtoAjaxResponse, error) {
	getLogger().Debug("Starting ApiV22PentesterLabelsGet request", "Type", Type, "MaxResultCount", MaxResultCount, "SkipCount", SkipCount, "Filter", Filter)

	// Build query parameters
	q := url.Values{}
	if Type != "" {
		q.Set("Type", Type)
	}
	q.Set("MaxResultCount", fmt.Sprint(MaxResultCount))
	q.Set("SkipCount", fmt.Sprint(SkipCount))
	if Filter != "" {
		q.Set("Filter", Filter)
	}

	var response LabelDtoPagedResultDtoAjaxResponse
	path := fmt.Sprintf("/api/v2.2/pentester/labels?%s", q.Encode())

	getLogger().Info("Making API request", "method", http.MethodGet, "path", path, "queryParams", q.Encode())
	_, err := c.DoRequest(http.MethodGet, path, q, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterLabelsGet", "error", err)
		return nil, err
	}

	getLogger().Debug("Successfully completed ApiV22PentesterLabelsGet")
	return &response, nil
}

// Get a paginated list of Vulnerability Types based on a filter
func (c *PentesterOps) ApiV22PentesterVulnerabilityTypesGet(MaxResultCount int, SkipCount int, Filter string) (*VulnerabilityTypeDtoPagedResultDtoAjaxResponse, error) {
	getLogger().Debug("Starting ApiV22PentesterVulnerabilityTypesGet request", "MaxResultCount", MaxResultCount, "SkipCount", SkipCount, "Filter", Filter)

	// Build query parameters
	q := url.Values{}
	q.Set("MaxResultCount", fmt.Sprint(MaxResultCount))
	q.Set("SkipCount", fmt.Sprint(SkipCount))
	if Filter != "" {
		q.Set("Filter", Filter)
	}

	var response VulnerabilityTypeDtoPagedResultDtoAjaxResponse
	path := fmt.Sprintf("/api/v2.2/pentester/vulnerability-types?%s", q.Encode())

	getLogger().Info("Making API request", "method", http.MethodGet, "path", path, "queryParams", q.Encode())
	_, err := c.DoRequest(http.MethodGet, path, q, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterVulnerabilityTypesGet", "error", err)
		return nil, err
	}

	getLogger().Debug("Successfully completed ApiV22PentesterVulnerabilityTypesGet")
	return &response, nil
}

// Gets a list of Users based on a filter
func (c *PentesterOps) ApiV22PentesterUsersGet(ClientId string, PortalRole string, MaxResultCount int, SkipCount int, Filter string) (*UserDtoPagedResultDtoAjaxResponse, error) {
	getLogger().Debug("Starting ApiV22PentesterUsersGet request", "ClientId", ClientId, "PortalRole", PortalRole, "MaxResultCount", MaxResultCount, "SkipCount", SkipCount, "Filter", Filter)

	// Build query parameters
	q := url.Values{}
	if ClientId != "" {
		q.Set("ClientId", ClientId)
	}
	if PortalRole != "" {
		q.Set("PortalRole", PortalRole)
	}
	q.Set("MaxResultCount", fmt.Sprint(MaxResultCount))
	q.Set("SkipCount", fmt.Sprint(SkipCount))
	if Filter != "" {
		q.Set("Filter", Filter)
	}

	var response UserDtoPagedResultDtoAjaxResponse
	path := fmt.Sprintf("/api/v2.2/pentester/users?%s", q.Encode())

	getLogger().Info("Making API request", "method", http.MethodGet, "path", path, "queryParams", q.Encode())
	_, err := c.DoRequest(http.MethodGet, path, q, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterUsersGet", "error", err)
		return nil, err
	}

	getLogger().Debug("Successfully completed ApiV22PentesterUsersGet")
	return &response, nil
}

// Create a new User
func (c *PentesterOps) ApiV22PentesterUsersPost(body interface{}) (*interface{}, error) {
	getLogger().Debug("Starting ApiV22PentesterUsersPost request")

	var response interface{}
	path := "/api/v2.2/pentester/users"

	getLogger().Info("Making API request", "method", http.MethodPost, "path", path)
	_, err := c.DoRequest(http.MethodPost, path, nil, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterUsersPost", "error", err)
		return nil, err
	}

	getLogger().Debug("Successfully completed ApiV22PentesterUsersPost")
	return &response, nil
}

// Get an User by ID
func (c *PentesterOps) ApiV22PentesterUsersByIdGet(id string) (*UserDtoAjaxResponse, error) {
	getLogger().Debug("Starting ApiV22PentesterUsersByIdGet request")

	var response UserDtoAjaxResponse
	path := fmt.Sprintf("/api/v2.2/pentester/users/%s", id)

	getLogger().Info("Making API request", "method", http.MethodGet, "path", path)
	_, err := c.DoRequest(http.MethodGet, path, nil, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterUsersByIdGet", "error", err)
		return nil, err
	}

	getLogger().Debug("Successfully completed ApiV22PentesterUsersByIdGet")
	return &response, nil
}

// Update an existing User
func (c *PentesterOps) ApiV22PentesterUsersByIdPut(id string, body interface{}) (*interface{}, error) {
	getLogger().Debug("Starting ApiV22PentesterUsersByIdPut request")

	var response interface{}
	path := fmt.Sprintf("/api/v2.2/pentester/users/%s", id)

	getLogger().Info("Making API request", "method", http.MethodPut, "path", path)
	_, err := c.DoRequest(http.MethodPut, path, nil, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterUsersByIdPut", "error", err)
		return nil, err
	}

	getLogger().Debug("Successfully completed ApiV22PentesterUsersByIdPut")
	return &response, nil
}

// Delete an User by ID
func (c *PentesterOps) ApiV22PentesterUsersByIdDelete(id string) (*interface{}, error) {
	getLogger().Debug("Starting ApiV22PentesterUsersByIdDelete request")

	var response interface{}
	path := fmt.Sprintf("/api/v2.2/pentester/users/%s", id)

	getLogger().Info("Making API request", "method", http.MethodDelete, "path", path)
	_, err := c.DoRequest(http.MethodDelete, path, nil, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterUsersByIdDelete", "error", err)
		return nil, err
	}

	getLogger().Debug("Successfully completed ApiV22PentesterUsersByIdDelete")
	return &response, nil
}

// Get a paginated list of Teams
func (c *PentesterOps) ApiV22PentesterTeamsGet(ProjectId string, ExcludeProjectId string, ClientId string, TeamType string, MaxResultCount int, SkipCount int, Filter string) (*TeamDtoPagedResultDtoAjaxResponse, error) {
	getLogger().Debug("Starting ApiV22PentesterTeamsGet request", "ProjectId", ProjectId, "ExcludeProjectId", ExcludeProjectId, "ClientId", ClientId, "TeamType", TeamType, "MaxResultCount", MaxResultCount, "SkipCount", SkipCount, "Filter", Filter)

	// Build query parameters
	q := url.Values{}
	if ProjectId != "" {
		q.Set("ProjectId", ProjectId)
	}
	if ExcludeProjectId != "" {
		q.Set("ExcludeProjectId", ExcludeProjectId)
	}
	if ClientId != "" {
		q.Set("ClientId", ClientId)
	}
	if TeamType != "" {
		q.Set("TeamType", TeamType)
	}
	q.Set("MaxResultCount", fmt.Sprint(MaxResultCount))
	q.Set("SkipCount", fmt.Sprint(SkipCount))
	if Filter != "" {
		q.Set("Filter", Filter)
	}

	var response TeamDtoPagedResultDtoAjaxResponse
	path := fmt.Sprintf("/api/v2.2/pentester/teams?%s", q.Encode())

	getLogger().Info("Making API request", "method", http.MethodGet, "path", path, "queryParams", q.Encode())
	_, err := c.DoRequest(http.MethodGet, path, q, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterTeamsGet", "error", err)
		return nil, err
	}

	getLogger().Debug("Successfully completed ApiV22PentesterTeamsGet")
	return &response, nil
}

// Create a new Team. If the team is a Client team, you need to provide the Client id.
func (c *PentesterOps) ApiV22PentesterTeamsPost(body interface{}) (*GuidAjaxResponse, error) {
	getLogger().Debug("Starting ApiV22PentesterTeamsPost request")

	var response GuidAjaxResponse
	path := "/api/v2.2/pentester/teams"

	getLogger().Info("Making API request", "method", http.MethodPost, "path", path)
	_, err := c.DoRequest(http.MethodPost, path, nil, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterTeamsPost", "error", err)
		return nil, err
	}

	getLogger().Debug("Successfully completed ApiV22PentesterTeamsPost")
	return &response, nil
}

// Get a Team by ID
func (c *PentesterOps) ApiV22PentesterTeamsByIdGet(id string) (*TeamDtoAjaxResponse, error) {
	getLogger().Debug("Starting ApiV22PentesterTeamsByIdGet request")

	var response TeamDtoAjaxResponse
	path := fmt.Sprintf("/api/v2.2/pentester/teams/%s", id)

	getLogger().Info("Making API request", "method", http.MethodGet, "path", path)
	_, err := c.DoRequest(http.MethodGet, path, nil, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterTeamsByIdGet", "error", err)
		return nil, err
	}

	getLogger().Debug("Successfully completed ApiV22PentesterTeamsByIdGet")
	return &response, nil
}

// Update an existing Team.	 Cannot change the Client id of a Team.
func (c *PentesterOps) ApiV22PentesterTeamsByIdPut(id string, body interface{}) (*interface{}, error) {
	getLogger().Debug("Starting ApiV22PentesterTeamsByIdPut request")

	var response interface{}
	path := fmt.Sprintf("/api/v2.2/pentester/teams/%s", id)

	getLogger().Info("Making API request", "method", http.MethodPut, "path", path)
	_, err := c.DoRequest(http.MethodPut, path, nil, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterTeamsByIdPut", "error", err)
		return nil, err
	}

	getLogger().Debug("Successfully completed ApiV22PentesterTeamsByIdPut")
	return &response, nil
}

// Delete a Team.
func (c *PentesterOps) ApiV22PentesterTeamsByIdDelete(id string) (*interface{}, error) {
	getLogger().Debug("Starting ApiV22PentesterTeamsByIdDelete request")

	var response interface{}
	path := fmt.Sprintf("/api/v2.2/pentester/teams/%s", id)

	getLogger().Info("Making API request", "method", http.MethodDelete, "path", path)
	_, err := c.DoRequest(http.MethodDelete, path, nil, &response)
	if err != nil {
		getLogger().Error("Failed ApiV22PentesterTeamsByIdDelete", "error", err)
		return nil, err
	}

	getLogger().Debug("Successfully completed ApiV22PentesterTeamsByIdDelete")
	return &response, nil
}
